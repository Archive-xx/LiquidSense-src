//Deobfuscated with https://github.com/PetoPetko/Minecraft-Deobfuscator3000 using mappings "mcp_stable-22-1.8.9"!

package net.ccbluex.liquidbounce.features.module.modules.exploit;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import joptsimple.internal.Strings;
import net.ccbluex.liquidbounce.event.EventTarget;
import net.ccbluex.liquidbounce.event.PacketEvent;
import net.ccbluex.liquidbounce.event.UpdateEvent;
import net.ccbluex.liquidbounce.features.module.Module;
import net.ccbluex.liquidbounce.features.module.ModuleCategory;
import net.ccbluex.liquidbounce.features.module.ModuleInfo;
import net.ccbluex.liquidbounce.utils.ClientUtils;
import net.ccbluex.liquidbounce.utils.timer.TickTimer;
import net.minecraft.network.play.client.C14PacketTabComplete;
import net.minecraft.network.play.server.S3APacketTabComplete;

@ModuleInfo(
   name = "Plugins",
   description = "Allows you to see which plugins the server is using.",
   category = ModuleCategory.EXPLOIT
)
public class Plugins extends Module {
   // $FF: synthetic field
   private final TickTimer tickTimer = new TickTimer();

   @EventTarget
   public void onPacket(PacketEvent lllllllllllllllllllIIIIIllIlIIII) {
      if (lllllllllllllllllllIIIIIllIlIIII.getPacket() instanceof S3APacketTabComplete) {
         S3APacketTabComplete lllllllllllllllllllIIIIIllIlIlll = (S3APacketTabComplete)lllllllllllllllllllIIIIIllIlIIII.getPacket();
         List<String> lllllllllllllllllllIIIIIllIIlllI = new ArrayList();
         String[] lllllllllllllllllllIIIIIllIlIlII = lllllllllllllllllllIIIIIllIlIlll.func_149630_c();
         short lllllllllllllllllllIIIIIllIIlIll = lllllllllllllllllllIIIIIllIlIlII;
         boolean lllllllllllllllllllIIIIIllIIlIlI = lllllllllllllllllllIIIIIllIlIlII.length;

         for(int lllllllllllllllllllIIIIIllIIlIIl = 0; lllllllllllllllllllIIIIIllIIlIIl < lllllllllllllllllllIIIIIllIIlIlI; ++lllllllllllllllllllIIIIIllIIlIIl) {
            float lllllllllllllllllllIIIIIllIIlIII = lllllllllllllllllllIIIIIllIIlIll[lllllllllllllllllllIIIIIllIIlIIl];
            short lllllllllllllllllllIIIIIllIIIlll = lllllllllllllllllllIIIIIllIIlIII.split(":");
            if (lllllllllllllllllllIIIIIllIIIlll.length > 1) {
               long lllllllllllllllllllIIIIIllIIIlIl = lllllllllllllllllllIIIIIllIIIlll[0].replace("/", "");
               if (!lllllllllllllllllllIIIIIllIIlllI.contains(lllllllllllllllllllIIIIIllIIIlIl)) {
                  lllllllllllllllllllIIIIIllIIlllI.add(lllllllllllllllllllIIIIIllIIIlIl);
                  boolean var10001 = false;
               }
            }
         }

         Collections.sort(lllllllllllllllllllIIIIIllIIlllI);
         if (!lllllllllllllllllllIIIIIllIIlllI.isEmpty()) {
            ClientUtils.displayChatMessage(String.valueOf((new StringBuilder()).append("§aPlugins §7(§8").append(lllllllllllllllllllIIIIIllIIlllI.size()).append("§7): §c").append(Strings.join((String[])lllllllllllllllllllIIIIIllIIlllI.toArray(new String[0]), "§7, §c"))));
         } else {
            ClientUtils.displayChatMessage("§cNo plugins found.");
         }

         lllllllllllllllllllIIIIIllIlIIll.setState(false);
         lllllllllllllllllllIIIIIllIlIIll.tickTimer.reset();
      }

   }

   public void onEnable() {
      if (mc.thePlayer != null) {
         mc.getNetHandler().addToSendQueue(new C14PacketTabComplete("/"));
         lllllllllllllllllllIIIIlIIIlIIlI.tickTimer.reset();
      }
   }

   @EventTarget
   public void onUpdate(UpdateEvent lllllllllllllllllllIIIIlIIIIllII) {
      lllllllllllllllllllIIIIlIIIIlIlI.tickTimer.update();
      if (lllllllllllllllllllIIIIlIIIIlIlI.tickTimer.hasTimePassed(20)) {
         ClientUtils.displayChatMessage("§cPlugins check timed out...");
         lllllllllllllllllllIIIIlIIIIlIlI.tickTimer.reset();
         lllllllllllllllllllIIIIlIIIIlIlI.setState(false);
      }

   }
}
