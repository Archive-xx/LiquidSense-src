//Deobfuscated with https://github.com/PetoPetko/Minecraft-Deobfuscator3000 using mappings "mcp_stable-22-1.8.9"!

package net.ccbluex.liquidbounce.features.module.modules.exploit;

import net.ccbluex.liquidbounce.event.EventTarget;
import net.ccbluex.liquidbounce.event.KeyEvent;
import net.ccbluex.liquidbounce.event.PacketEvent;
import net.ccbluex.liquidbounce.event.ScreenEvent;
import net.ccbluex.liquidbounce.features.module.Module;
import net.ccbluex.liquidbounce.features.module.ModuleCategory;
import net.ccbluex.liquidbounce.features.module.ModuleInfo;
import net.minecraft.client.gui.inventory.GuiContainer;
import net.minecraft.client.gui.inventory.GuiInventory;
import net.minecraft.network.play.client.C0DPacketCloseWindow;
import net.minecraft.network.play.server.S2EPacketCloseWindow;

@ModuleInfo(
   name = "KeepContainer",
   description = "Allows you to open a formerly closed inventory container everywhere. (Press INSERT Key to open)",
   category = ModuleCategory.EXPLOIT
)
public class KeepContainer extends Module {
   // $FF: synthetic field
   private GuiContainer container;

   @EventTarget
   public void onKey(KeyEvent lllllllllllllllllIllIllIIllIlIlI) {
      if (lllllllllllllllllIllIllIIllIlIlI.getKey() == 210) {
         if (lllllllllllllllllIllIllIIllIllIl.container == null) {
            return;
         }

         mc.displayGuiScreen(lllllllllllllllllIllIllIIllIllIl.container);
      }

   }

   @EventTarget
   public void onGui(ScreenEvent lllllllllllllllllIllIllIIlllIIII) {
      if (lllllllllllllllllIllIllIIlllIIII.getGuiScreen() instanceof GuiContainer && !(lllllllllllllllllIllIllIIlllIIII.getGuiScreen() instanceof GuiInventory)) {
         lllllllllllllllllIllIllIIlllIIll.container = (GuiContainer)lllllllllllllllllIllIllIIlllIIII.getGuiScreen();
      }

   }

   public void onDisable() {
      if (lllllllllllllllllIllIllIIlllIlll.container != null) {
         mc.getNetHandler().addToSendQueue(new C0DPacketCloseWindow(lllllllllllllllllIllIllIIlllIlll.container.inventorySlots.windowId));
      }

      lllllllllllllllllIllIllIIlllIlll.container = null;
   }

   @EventTarget
   public void onPacket(PacketEvent lllllllllllllllllIllIllIIllIIIlI) {
      if (lllllllllllllllllIllIllIIllIIIlI.getPacket() instanceof C0DPacketCloseWindow) {
         lllllllllllllllllIllIllIIllIIIlI.cancelEvent();
      }

      if (lllllllllllllllllIllIllIIllIIIlI.getPacket() instanceof S2EPacketCloseWindow) {
         boolean lllllllllllllllllIllIllIIllIIIIl = (S2EPacketCloseWindow)lllllllllllllllllIllIllIIllIIIlI.getPacket();
         if (lllllllllllllllllIllIllIIllIIlIl.container != null && lllllllllllllllllIllIllIIllIIlIl.container.inventorySlots != null && lllllllllllllllllIllIllIIllIIIIl.windowId == lllllllllllllllllIllIllIIllIIlIl.container.inventorySlots.windowId) {
            lllllllllllllllllIllIllIIllIIlIl.container = null;
         }
      }

   }
}
