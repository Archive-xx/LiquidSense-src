//Deobfuscated with https://github.com/PetoPetko/Minecraft-Deobfuscator3000 using mappings "mcp_stable-22-1.8.9"!

package net.ccbluex.liquidbounce.features.module.modules.exploit;

import kotlin.Metadata;
import kotlin.TypeCastException;
import kotlin.jvm.internal.Intrinsics;
import net.ccbluex.liquidbounce.features.module.Module;
import net.ccbluex.liquidbounce.features.module.ModuleCategory;
import net.ccbluex.liquidbounce.features.module.ModuleInfo;
import net.ccbluex.liquidbounce.utils.MinecraftInstance;
import net.ccbluex.liquidbounce.value.FloatValue;
import net.ccbluex.liquidbounce.value.ListValue;
import net.minecraft.client.Minecraft;
import net.minecraft.client.entity.EntityPlayerSP;
import net.minecraft.client.network.NetHandlerPlayClient;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C03PacketPlayer.C04PacketPlayerPosition;

@ModuleInfo(
   name = "Clip",
   description = "Allows you to clip through blocks.",
   category = ModuleCategory.EXPLOIT,
   canEnable = false
)
@Metadata(
   mv = {1, 1, 16},
   bv = {1, 0, 3},
   k = 1,
   d1 = {"\u0000 \n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\u0002\n\u0000\b\u0007\u0018\u00002\u00020\u0001B\u0005¢\u0006\u0002\u0010\u0002J\b\u0010\b\u001a\u00020\tH\u0016R\u000e\u0010\u0003\u001a\u00020\u0004X\u0082\u0004¢\u0006\u0002\n\u0000R\u000e\u0010\u0005\u001a\u00020\u0006X\u0082\u0004¢\u0006\u0002\n\u0000R\u000e\u0010\u0007\u001a\u00020\u0004X\u0082\u0004¢\u0006\u0002\n\u0000¨\u0006\n"},
   d2 = {"Lnet/ccbluex/liquidbounce/features/module/modules/exploit/Clip;", "Lnet/ccbluex/liquidbounce/features/module/Module;", "()V", "horizontalValue", "Lnet/ccbluex/liquidbounce/value/FloatValue;", "modeValue", "Lnet/ccbluex/liquidbounce/value/ListValue;", "verticalValue", "onEnable", "", "LiquidSense"}
)
public final class Clip extends Module {
   // $FF: synthetic field
   private final ListValue modeValue = new ListValue("Mode", new String[]{"Teleport", "Flag"}, "Teleport");
   // $FF: synthetic field
   private final FloatValue verticalValue = new FloatValue("Vertical", 5.0F, -10.0F, 10.0F);
   // $FF: synthetic field
   private final FloatValue horizontalValue = new FloatValue("Horizontal", 0.0F, -10.0F, 10.0F);

   // $FF: synthetic method
   public static final Minecraft access$getMc$p$s1046033730() {
      return MinecraftInstance.mc;
   }

   public void onEnable() {
      boolean var10001;
      if (access$getMc$p$s1046033730().thePlayer != null) {
         var10001 = false;
         double lIIIIlIIlllIlIl = Math.toRadians((double)access$getMc$p$s1046033730().thePlayer.rotationYaw);
         char lIIIIlIIllIllll = false;
         long lIIIIlIIlllIIII = -Math.sin(lIIIIlIIlllIlIl) * ((Number)lIIIIlIIlllIlII.horizontalValue.get()).doubleValue();
         char lIIIIlIIllIlllI = false;
         double lIIIIlIIlllIlll = Math.cos(lIIIIlIIlllIlIl) * ((Number)lIIIIlIIlllIlII.horizontalValue.get()).doubleValue();
         char lIIIIlIIllIlllI = (String)lIIIIlIIlllIlII.modeValue.get();
         String lIIIIlIIllIllIl = false;
         if (lIIIIlIIllIlllI == null) {
            throw new TypeCastException("null cannot be cast to non-null type java.lang.String");
         } else {
            String var10000 = lIIIIlIIllIlllI.toLowerCase();
            Intrinsics.checkExpressionValueIsNotNull(var10000, "(this as java.lang.String).toLowerCase()");
            lIIIIlIIllIlllI = var10000;
            switch(lIIIIlIIllIlllI.hashCode()) {
            case -1360201941:
               if (lIIIIlIIllIlllI.equals("teleport")) {
                  access$getMc$p$s1046033730().thePlayer.setPosition(access$getMc$p$s1046033730().thePlayer.posX + lIIIIlIIlllIIII, access$getMc$p$s1046033730().thePlayer.posY + ((Number)lIIIIlIIlllIlII.verticalValue.get()).doubleValue(), access$getMc$p$s1046033730().thePlayer.posZ + lIIIIlIIlllIlll);
               }
               break;
            case 3145580:
               if (lIIIIlIIllIlllI.equals("flag")) {
                  Minecraft var22 = access$getMc$p$s1046033730();
                  Intrinsics.checkExpressionValueIsNotNull(var22, "mc");
                  NetHandlerPlayClient lIIIIlIIllllIII = var22.getNetHandler();
                  lIIIIlIIllllIII.addToSendQueue((Packet)(new C04PacketPlayerPosition(access$getMc$p$s1046033730().thePlayer.posX, access$getMc$p$s1046033730().thePlayer.posY, access$getMc$p$s1046033730().thePlayer.posZ, true)));
                  lIIIIlIIllllIII.addToSendQueue((Packet)(new C04PacketPlayerPosition(0.5D, 0.0D, 0.5D, true)));
                  lIIIIlIIllllIII.addToSendQueue((Packet)(new C04PacketPlayerPosition(access$getMc$p$s1046033730().thePlayer.posX, access$getMc$p$s1046033730().thePlayer.posY, access$getMc$p$s1046033730().thePlayer.posZ, true)));
                  lIIIIlIIllllIII.addToSendQueue((Packet)(new C04PacketPlayerPosition(access$getMc$p$s1046033730().thePlayer.posX + lIIIIlIIlllIIII, access$getMc$p$s1046033730().thePlayer.posY + ((Number)lIIIIlIIlllIlII.verticalValue.get()).doubleValue(), access$getMc$p$s1046033730().thePlayer.posZ + lIIIIlIIlllIlll, true)));
                  lIIIIlIIllllIII.addToSendQueue((Packet)(new C04PacketPlayerPosition(0.5D, 0.0D, 0.5D, true)));
                  lIIIIlIIllllIII.addToSendQueue((Packet)(new C04PacketPlayerPosition(access$getMc$p$s1046033730().thePlayer.posX + 0.5D, access$getMc$p$s1046033730().thePlayer.posY, access$getMc$p$s1046033730().thePlayer.posZ + 0.5D, true)));
                  EntityPlayerSP var23 = access$getMc$p$s1046033730().thePlayer;
                  double lIIIIlIIllIlIlI = access$getMc$p$s1046033730().thePlayer.posX;
                  char lIIIIlIIllIlIll = var23;
                  float lIIIIlIIllIllII = false;
                  double lIIIIlIIllIlIIl = Math.sin(lIIIIlIIlllIlIl);
                  double var24 = lIIIIlIIllIlIlI + -lIIIIlIIllIlIIl * 0.04D;
                  double var10002 = access$getMc$p$s1046033730().thePlayer.posY;
                  byte lIIIIlIIllIlIII = access$getMc$p$s1046033730().thePlayer.posZ;
                  lIIIIlIIllIlIIl = var10002;
                  lIIIIlIIllIlIlI = var24;
                  lIIIIlIIllIllII = false;
                  char lIIIIlIIlllIIIl = Math.cos(lIIIIlIIlllIlIl);
                  lIIIIlIIllIlIll.setPosition(lIIIIlIIllIlIlI, lIIIIlIIllIlIIl, lIIIIlIIllIlIII + lIIIIlIIlllIIIl * 0.04D);
               }
            }

         }
      } else {
         var10001 = false;
      }
   }
}
