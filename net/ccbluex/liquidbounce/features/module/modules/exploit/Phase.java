//Deobfuscated with https://github.com/PetoPetko/Minecraft-Deobfuscator3000 using mappings "mcp_stable-22-1.8.9"!

package net.ccbluex.liquidbounce.features.module.modules.exploit;

import net.ccbluex.liquidbounce.event.BlockBBEvent;
import net.ccbluex.liquidbounce.event.EventTarget;
import net.ccbluex.liquidbounce.event.MoveEvent;
import net.ccbluex.liquidbounce.event.PacketEvent;
import net.ccbluex.liquidbounce.event.PushOutEvent;
import net.ccbluex.liquidbounce.event.UpdateEvent;
import net.ccbluex.liquidbounce.features.module.Module;
import net.ccbluex.liquidbounce.features.module.ModuleCategory;
import net.ccbluex.liquidbounce.features.module.ModuleInfo;
import net.ccbluex.liquidbounce.utils.MovementUtils;
import net.ccbluex.liquidbounce.utils.block.BlockUtils;
import net.ccbluex.liquidbounce.utils.timer.TickTimer;
import net.ccbluex.liquidbounce.value.ListValue;
import net.minecraft.block.BlockAir;
import net.minecraft.client.network.NetHandlerPlayClient;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C03PacketPlayer.C04PacketPlayerPosition;
import net.minecraft.util.AxisAlignedBB;
import net.minecraft.util.BlockPos;
import net.minecraft.util.MathHelper;

@ModuleInfo(
   name = "Phase",
   description = "Allows you to walk through blocks.",
   category = ModuleCategory.EXPLOIT
)
public class Phase extends Module {
   // $FF: synthetic field
   private TickTimer mineplexTickTimer = new TickTimer();
   // $FF: synthetic field
   private boolean mineplexClip;
   // $FF: synthetic field
   private final ListValue modeValue = new ListValue("Mode", new String[]{"Vanilla", "Skip", "Spartan", "Clip", "AAC3.5.0", "Mineplex"}, "Vanilla");
   // $FF: synthetic field
   private final TickTimer tickTimer = new TickTimer();

   @EventTarget
   public void onBlockBB(BlockBBEvent lIIlIIIIIIIlIll) {
      if (mc.thePlayer != null && BlockUtils.collideBlockIntersects(mc.thePlayer.getEntityBoundingBox(), (lIIIllllllIIllI) -> {
         return !(lIIIllllllIIllI instanceof BlockAir);
      }) && lIIlIIIIIIIlIll.getBoundingBox() != null && lIIlIIIIIIIlIll.getBoundingBox().maxY > mc.thePlayer.getEntityBoundingBox().minY && !((String)lIIlIIIIIIIllII.modeValue.get()).equalsIgnoreCase("Mineplex")) {
         short lIIlIIIIIIIlIlI = lIIlIIIIIIIlIll.getBoundingBox();
         lIIlIIIIIIIlIll.setBoundingBox(new AxisAlignedBB(lIIlIIIIIIIlIlI.maxX, mc.thePlayer.getEntityBoundingBox().minY, lIIlIIIIIIIlIlI.maxZ, lIIlIIIIIIIlIlI.minX, lIIlIIIIIIIlIlI.minY, lIIlIIIIIIIlIlI.minZ));
      }

   }

   public String getTag() {
      return (String)lIIIllllllIlIIl.modeValue.get();
   }

   @EventTarget
   public void onPushOut(PushOutEvent lIIIllllllIllII) {
      lIIIllllllIllII.cancelEvent();
   }

   @EventTarget
   public void onUpdate(UpdateEvent lIIlIIIIIlIIIIl) {
      boolean lIIlIIIIIlIIIII = BlockUtils.collideBlockIntersects(mc.thePlayer.getEntityBoundingBox(), (lIIIllllllIIIlI) -> {
         return !(lIIIllllllIIIlI instanceof BlockAir);
      });
      if (lIIlIIIIIlIIIII && !((String)lIIlIIIIIlIIIlI.modeValue.get()).equalsIgnoreCase("Mineplex")) {
         mc.thePlayer.noClip = true;
         mc.thePlayer.motionY = 0.0D;
         mc.thePlayer.onGround = true;
      }

      NetHandlerPlayClient lIIlIIIIIIlllll = mc.getNetHandler();
      long lIIlIIIIIIllIll = ((String)lIIlIIIIIlIIIlI.modeValue.get()).toLowerCase();
      short lIIlIIIIIIllIlI = -1;
      switch(lIIlIIIIIIllIll.hashCode()) {
      case -2011701869:
         if (lIIlIIIIIIllIll.equals("spartan")) {
            lIIlIIIIIIllIlI = 2;
         }
         break;
      case 3056464:
         if (lIIlIIIIIIllIll.equals("clip")) {
            lIIlIIIIIIllIlI = 3;
         }
         break;
      case 3532159:
         if (lIIlIIIIIIllIll.equals("skip")) {
            lIIlIIIIIIllIlI = 1;
         }
         break;
      case 233102203:
         if (lIIlIIIIIIllIll.equals("vanilla")) {
            lIIlIIIIIIllIlI = 0;
         }
         break;
      case 325230105:
         if (lIIlIIIIIIllIll.equals("aac3.5.0")) {
            lIIlIIIIIIllIlI = 4;
         }
      }

      double lIIlIIIIIlIlIlI;
      double lIIlIIIIIIllIII;
      double lIIlIIIIIlIlIII;
      int lIIlIIIIIIlIllI;
      switch(lIIlIIIIIIllIlI) {
      case 0:
         if (mc.thePlayer.onGround && lIIlIIIIIlIIIlI.tickTimer.hasTimePassed(2) && mc.thePlayer.isCollidedHorizontally && (!lIIlIIIIIlIIIII || mc.thePlayer.isSneaking())) {
            lIIlIIIIIIlllll.addToSendQueue(new C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, true));
            lIIlIIIIIIlllll.addToSendQueue(new C04PacketPlayerPosition(0.5D, 0.0D, 0.5D, true));
            lIIlIIIIIIlllll.addToSendQueue(new C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, true));
            lIIlIIIIIIlllll.addToSendQueue(new C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY + 0.2D, mc.thePlayer.posZ, true));
            lIIlIIIIIIlllll.addToSendQueue(new C04PacketPlayerPosition(0.5D, 0.0D, 0.5D, true));
            lIIlIIIIIIlllll.addToSendQueue(new C04PacketPlayerPosition(mc.thePlayer.posX + 0.5D, mc.thePlayer.posY, mc.thePlayer.posZ + 0.5D, true));
            lIIlIIIIIlIlIlI = Math.toRadians((double)mc.thePlayer.rotationYaw);
            lIIlIIIIIIllIII = -Math.sin(lIIlIIIIIlIlIlI) * 0.04D;
            lIIlIIIIIlIlIII = Math.cos(lIIlIIIIIlIlIlI) * 0.04D;
            mc.thePlayer.setPosition(mc.thePlayer.posX + lIIlIIIIIIllIII, mc.thePlayer.posY, mc.thePlayer.posZ + lIIlIIIIIlIlIII);
            lIIlIIIIIlIIIlI.tickTimer.reset();
         }
         break;
      case 1:
         if (mc.thePlayer.onGround && lIIlIIIIIlIIIlI.tickTimer.hasTimePassed(2) && mc.thePlayer.isCollidedHorizontally && (!lIIlIIIIIlIIIII || mc.thePlayer.isSneaking())) {
            lIIlIIIIIlIlIlI = MovementUtils.getDirection();
            lIIlIIIIIIllIII = -Math.sin(lIIlIIIIIlIlIlI) * 0.3D;
            lIIlIIIIIlIlIII = Math.cos(lIIlIIIIIlIlIlI) * 0.3D;

            for(lIIlIIIIIIlIllI = 0; lIIlIIIIIIlIllI < 3; ++lIIlIIIIIIlIllI) {
               mc.getNetHandler().addToSendQueue(new C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY + 0.06D, mc.thePlayer.posZ, true));
               mc.getNetHandler().addToSendQueue(new C04PacketPlayerPosition(mc.thePlayer.posX + lIIlIIIIIIllIII * (double)lIIlIIIIIIlIllI, mc.thePlayer.posY, mc.thePlayer.posZ + lIIlIIIIIlIlIII * (double)lIIlIIIIIIlIllI, true));
            }

            mc.thePlayer.setEntityBoundingBox(mc.thePlayer.getEntityBoundingBox().offset(lIIlIIIIIIllIII, 0.0D, lIIlIIIIIlIlIII));
            mc.thePlayer.setPositionAndUpdate(mc.thePlayer.posX + lIIlIIIIIIllIII, mc.thePlayer.posY, mc.thePlayer.posZ + lIIlIIIIIlIlIII);
            lIIlIIIIIlIIIlI.tickTimer.reset();
         }
         break;
      case 2:
         if (mc.thePlayer.onGround && lIIlIIIIIlIIIlI.tickTimer.hasTimePassed(2) && mc.thePlayer.isCollidedHorizontally && (!lIIlIIIIIlIIIII || mc.thePlayer.isSneaking())) {
            lIIlIIIIIIlllll.addToSendQueue(new C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, true));
            lIIlIIIIIIlllll.addToSendQueue(new C04PacketPlayerPosition(0.5D, 0.0D, 0.5D, true));
            lIIlIIIIIIlllll.addToSendQueue(new C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, true));
            lIIlIIIIIIlllll.addToSendQueue(new C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY - 0.2D, mc.thePlayer.posZ, true));
            lIIlIIIIIIlllll.addToSendQueue(new C04PacketPlayerPosition(0.5D, 0.0D, 0.5D, true));
            lIIlIIIIIIlllll.addToSendQueue(new C04PacketPlayerPosition(mc.thePlayer.posX + 0.5D, mc.thePlayer.posY, mc.thePlayer.posZ + 0.5D, true));
            lIIlIIIIIlIlIlI = Math.toRadians((double)mc.thePlayer.rotationYaw);
            lIIlIIIIIIllIII = -Math.sin(lIIlIIIIIlIlIlI) * 0.04D;
            lIIlIIIIIlIlIII = Math.cos(lIIlIIIIIlIlIlI) * 0.04D;
            mc.thePlayer.setPosition(mc.thePlayer.posX + lIIlIIIIIIllIII, mc.thePlayer.posY, mc.thePlayer.posZ + lIIlIIIIIlIlIII);
            lIIlIIIIIlIIIlI.tickTimer.reset();
         }
         break;
      case 3:
         if (lIIlIIIIIlIIIlI.tickTimer.hasTimePassed(2) && mc.thePlayer.isCollidedHorizontally && (!lIIlIIIIIlIIIII || mc.thePlayer.isSneaking())) {
            lIIlIIIIIlIlIlI = Math.toRadians((double)mc.thePlayer.rotationYaw);
            lIIlIIIIIIllIII = mc.thePlayer.posX;
            lIIlIIIIIlIlIII = mc.thePlayer.posZ;

            for(lIIlIIIIIIlIllI = 1; lIIlIIIIIIlIllI <= 10; ++lIIlIIIIIIlIllI) {
               double lIIlIIIIIlIllIl = -Math.sin(lIIlIIIIIlIlIlI) * (double)lIIlIIIIIIlIllI;
               long lIIlIIIIIIlIIll = Math.cos(lIIlIIIIIlIlIlI) * (double)lIIlIIIIIIlIllI;
               if (BlockUtils.getBlock(new BlockPos(lIIlIIIIIIllIII + lIIlIIIIIlIllIl, mc.thePlayer.posY, lIIlIIIIIlIlIII + lIIlIIIIIIlIIll)) instanceof BlockAir && BlockUtils.getBlock(new BlockPos(lIIlIIIIIIllIII + lIIlIIIIIlIllIl, mc.thePlayer.posY + 1.0D, lIIlIIIIIlIlIII + lIIlIIIIIIlIIll)) instanceof BlockAir) {
                  mc.thePlayer.setPosition(lIIlIIIIIIllIII + lIIlIIIIIlIllIl, mc.thePlayer.posY, lIIlIIIIIlIlIII + lIIlIIIIIIlIIll);
                  break;
               }
            }

            lIIlIIIIIlIIIlI.tickTimer.reset();
         }
         break;
      case 4:
         if (lIIlIIIIIlIIIlI.tickTimer.hasTimePassed(2) && mc.thePlayer.isCollidedHorizontally && (!lIIlIIIIIlIIIII || mc.thePlayer.isSneaking())) {
            lIIlIIIIIlIlIlI = Math.toRadians((double)mc.thePlayer.rotationYaw);
            lIIlIIIIIIllIII = mc.thePlayer.posX;
            lIIlIIIIIlIlIII = mc.thePlayer.posZ;
            double lIIlIIIIIlIIlII = -Math.sin(lIIlIIIIIlIlIlI);
            String lIIlIIIIIIlIlII = Math.cos(lIIlIIIIIlIlIlI);
            mc.thePlayer.setPosition(lIIlIIIIIIllIII + lIIlIIIIIlIIlII, mc.thePlayer.posY, lIIlIIIIIlIlIII + lIIlIIIIIIlIlII);
            lIIlIIIIIlIIIlI.tickTimer.reset();
         }
      }

      lIIlIIIIIlIIIlI.tickTimer.update();
   }

   @EventTarget
   public void onPacket(PacketEvent lIIlIIIIIIIIIIl) {
      Packet<?> lIIIlllllllllIl = lIIlIIIIIIIIIIl.getPacket();
      if (lIIIlllllllllIl instanceof C03PacketPlayer) {
         C03PacketPlayer lIIlIIIIIIIIIll = (C03PacketPlayer)lIIIlllllllllIl;
         if (((String)lIIIlllllllllll.modeValue.get()).equalsIgnoreCase("AAC3.5.0")) {
            float lIIlIIIIIIIIlII = (float)MovementUtils.getDirection();
            lIIlIIIIIIIIIll.x -= (double)MathHelper.sin(lIIlIIIIIIIIlII) * 1.0E-8D;
            lIIlIIIIIIIIIll.z += (double)MathHelper.cos(lIIlIIIIIIIIlII) * 1.0E-8D;
         }
      }

   }

   @EventTarget
   private void onMove(MoveEvent lIIIlllllllIIIl) {
      if (((String)lIIIlllllllIlII.modeValue.get()).equalsIgnoreCase("mineplex")) {
         if (mc.thePlayer.isCollidedHorizontally) {
            lIIIlllllllIlII.mineplexClip = true;
         }

         if (!lIIIlllllllIlII.mineplexClip) {
            return;
         }

         lIIIlllllllIlII.mineplexTickTimer.update();
         lIIIlllllllIIIl.setX(0.0D);
         lIIIlllllllIIIl.setZ(0.0D);
         if (lIIIlllllllIlII.mineplexTickTimer.hasTimePassed(3)) {
            lIIIlllllllIlII.mineplexTickTimer.reset();
            lIIIlllllllIlII.mineplexClip = false;
         } else if (lIIIlllllllIlII.mineplexTickTimer.hasTimePassed(1)) {
            double lIIIlllllllIIII = lIIIlllllllIlII.mineplexTickTimer.hasTimePassed(2) ? 1.6D : 0.06D;
            boolean lIIIllllllIllll = MovementUtils.getDirection();
            mc.thePlayer.setPosition(mc.thePlayer.posX + -Math.sin(lIIIllllllIllll) * lIIIlllllllIIII, mc.thePlayer.posY, mc.thePlayer.posZ + Math.cos(lIIIllllllIllll) * lIIIlllllllIIII);
         }
      }

   }
}
