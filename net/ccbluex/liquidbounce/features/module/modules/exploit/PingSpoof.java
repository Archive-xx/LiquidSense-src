//Deobfuscated with https://github.com/PetoPetko/Minecraft-Deobfuscator3000 using mappings "mcp_stable-22-1.8.9"!

package net.ccbluex.liquidbounce.features.module.modules.exploit;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map.Entry;
import net.ccbluex.liquidbounce.event.EventTarget;
import net.ccbluex.liquidbounce.event.PacketEvent;
import net.ccbluex.liquidbounce.event.PacketSenEvent;
import net.ccbluex.liquidbounce.event.UpdateEvent;
import net.ccbluex.liquidbounce.features.module.Module;
import net.ccbluex.liquidbounce.features.module.ModuleCategory;
import net.ccbluex.liquidbounce.features.module.ModuleInfo;
import net.ccbluex.liquidbounce.utils.timer.TimeUtils;
import net.ccbluex.liquidbounce.value.IntegerValue;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;
import net.minecraft.network.play.client.C16PacketClientStatus;

@ModuleInfo(
   name = "PingSpoof",
   description = "Spoofs your ping to a given value.",
   category = ModuleCategory.EXPLOIT
)
public class PingSpoof extends Module {
   // $FF: synthetic field
   private final IntegerValue minDelayValue;
   // $FF: synthetic field
   private final HashMap<Packet<?>, Long> packetsMap;
   // $FF: synthetic field
   private final IntegerValue maxDelayValue;
   // $FF: synthetic field
   boolean GhostInv;

   public PingSpoof() {
      llllllIIIIllllI.maxDelayValue = new IntegerValue("MaxDelay", 1000, 0, 5000) {
         protected void onChanged(Integer lIIllllIIIIIlI, Integer lIIlllIllllllI) {
            int lIIllllIIIIIII = (Integer)llllllIIIIllllI.minDelayValue.get();
            if (lIIllllIIIIIII > lIIlllIllllllI) {
               lIIlllIlllllll.set(lIIllllIIIIIII);
            }

         }
      };
      llllllIIIIllllI.minDelayValue = new IntegerValue("MinDelay", 500, 0, 5000) {
         protected void onChanged(Integer lIIlIIIIIIlllI, Integer lIIlIIIIIIllIl) {
            int lIIlIIIIIIllII = (Integer)llllllIIIIllllI.maxDelayValue.get();
            if (lIIlIIIIIIllII < lIIlIIIIIIllIl) {
               lIIlIIIIIIllll.set(lIIlIIIIIIllII);
            }

         }
      };
      llllllIIIIllllI.packetsMap = new HashMap();
   }

   @EventTarget(
      ignoreCondition = true
   )
   public void onUpdate(UpdateEvent lllllIllllllIIl) {
      try {
         synchronized(lllllIllllllIlI.packetsMap) {
            Iterator lllllIlllllIllI = lllllIllllllIlI.packetsMap.entrySet().iterator();

            while(lllllIlllllIllI.hasNext()) {
               Entry<Packet<?>, Long> lllllIlllllIlIl = (Entry)lllllIlllllIllI.next();
               if ((Long)lllllIlllllIlIl.getValue() < System.currentTimeMillis()) {
                  mc.getNetHandler().addToSendQueue((Packet)lllllIlllllIlIl.getKey());
                  lllllIlllllIllI.remove();
               }
            }
         }
      } catch (Throwable var8) {
         var8.printStackTrace();
      }

   }

   @EventTarget
   public void onPacket(PacketSenEvent llllllIIIIlIIlI) {
      Packet llllllIIIIlIIll = llllllIIIIlIIlI.getPacket();
      if (llllllIIIIlIIll instanceof C0FPacketConfirmTransaction) {
         C0FPacketConfirmTransaction llllllIIIIlIllI = (C0FPacketConfirmTransaction)llllllIIIIlIIll;
         mc.getNetHandler().getNetworkManager().sendPacket(new C0FPacketConfirmTransaction(Integer.MAX_VALUE, llllllIIIIlIllI.getUid(), false));
         if (llllllIIIIlIllI.getUid() < 0 && llllllIIIIlIllI.getWindowId() == 0) {
            llllllIIIIlIIlI.cancelEvent();
         }
      }

   }

   public void onDisable() {
      llllllIIIIllIll.packetsMap.clear();
   }

   @EventTarget
   public void onPacket(PacketEvent llllllIIIIIIllI) {
      char llllllIIIIIIlIl = llllllIIIIIIllI.getPacket();
      if ((llllllIIIIIIlIl instanceof C00PacketKeepAlive || llllllIIIIIIlIl instanceof C16PacketClientStatus) && !mc.thePlayer.isDead && !(mc.thePlayer.getHealth() <= 0.0F) && !llllllIIIIIIlll.packetsMap.containsKey(llllllIIIIIIlIl)) {
         llllllIIIIIIllI.cancelEvent();
         synchronized(llllllIIIIIIlll.packetsMap) {
            llllllIIIIIIlll.packetsMap.put(llllllIIIIIIlIl, System.currentTimeMillis() + TimeUtils.randomDelay((Integer)llllllIIIIIIlll.minDelayValue.get(), (Integer)llllllIIIIIIlll.maxDelayValue.get()));
            boolean var10001 = false;
         }
      }

   }
}
