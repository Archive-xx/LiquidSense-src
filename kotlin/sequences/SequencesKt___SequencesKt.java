package kotlin.sequences;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import kotlin.Metadata;
import kotlin.Pair;
import kotlin.ResultKt;
import kotlin.SinceKotlin;
import kotlin.Unit;
import kotlin.collections.ArraysKt;
import kotlin.collections.CollectionsKt;
import kotlin.collections.Grouping;
import kotlin.collections.IndexedValue;
import kotlin.collections.SetsKt;
import kotlin.collections.SlidingWindowKt;
import kotlin.comparisons.ComparisonsKt;
import kotlin.coroutines.Continuation;
import kotlin.coroutines.intrinsics.IntrinsicsKt;
import kotlin.internal.InlineOnly;
import kotlin.internal.PlatformImplementationsKt;
import kotlin.jvm.JvmName;
import kotlin.jvm.functions.Function1;
import kotlin.jvm.functions.Function2;
import kotlin.jvm.functions.Function3;
import kotlin.jvm.internal.DoubleCompanionObject;
import kotlin.jvm.internal.Intrinsics;
import kotlin.jvm.internal.Ref;
import kotlin.text.StringsKt;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

@Metadata(
   mv = {1, 1, 15},
   bv = {1, 0, 3},
   k = 5,
   xi = 1,
   d1 = {"\u0000\u0088\u0002\n\u0000\n\u0002\u0010\u000b\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\u001c\n\u0002\b\u0002\n\u0002\u0010$\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010%\n\u0002\b\b\n\u0002\u0010\u0006\n\u0002\u0010\u0005\n\u0002\b\u0002\n\u0002\u0010\u0007\n\u0000\n\u0002\u0010\b\n\u0000\n\u0002\u0010\t\n\u0000\n\u0002\u0010\n\n\u0002\b\u0002\n\u0002\u0010 \n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0012\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010\u001f\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\u0000\n\u0002\b\u0012\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\u0002\n\u0002\b\u0004\n\u0002\u0010!\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\r\n\u0002\b\u0006\n\u0002\u0010\u000e\n\u0002\b\f\n\u0002\u0010\u000f\n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0007\n\u0002\u0010\u0011\n\u0002\b!\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010#\n\u0000\n\u0002\u0010\"\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\u0006\u001a-\u0010\u0000\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a\u0016\u0010\u0006\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a-\u0010\u0006\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a\u001c\u0010\u0007\u001a\b\u0012\u0004\u0012\u0002H\u00020\b\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u001f\u0010\t\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0087\b\u001aQ\u0010\n\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001e\u0010\u000e\u001a\u001a\u0012\u0004\u0012\u0002H\u0002\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000f0\u0005H\u0086\b\u001a?\u0010\u0010\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\u00020\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0086\b\u001aY\u0010\u0010\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u00052\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\r0\u0005H\u0086\b\u001aZ\u0010\u0013\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0018\b\u0002\u0010\u0014*\u0012\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\u0006\b\u0000\u0012\u0002H\u00020\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0086\b¢\u0006\u0002\u0010\u0017\u001at\u0010\u0013\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r\"\u0018\b\u0003\u0010\u0014*\u0012\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\u0006\b\u0000\u0012\u0002H\r0\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u00052\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\r0\u0005H\u0086\b¢\u0006\u0002\u0010\u0018\u001al\u0010\u0019\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r\"\u0018\b\u0003\u0010\u0014*\u0012\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\u0006\b\u0000\u0012\u0002H\r0\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u001e\u0010\u000e\u001a\u001a\u0012\u0004\u0012\u0002H\u0002\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000f0\u0005H\u0086\b¢\u0006\u0002\u0010\u0017\u001a?\u0010\u001a\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000b\"\u0004\b\u0000\u0010\f\"\u0004\b\u0001\u0010\r*\b\u0012\u0004\u0012\u0002H\f0\u00032\u0012\u0010\u001b\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u0005H\u0087\b\u001aZ\u0010\u001c\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\f\"\u0004\b\u0001\u0010\r\"\u0018\b\u0002\u0010\u0014*\u0012\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\u0006\b\u0000\u0012\u0002H\r0\u0015*\b\u0012\u0004\u0012\u0002H\f0\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u001b\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u0005H\u0087\b¢\u0006\u0002\u0010\u0017\u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020\u001f0\u0003H\u0007¢\u0006\u0002\b \u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020\u001e0\u0003H\u0007¢\u0006\u0002\b!\u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020\"0\u0003H\u0007¢\u0006\u0002\b#\u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020$0\u0003H\u0007¢\u0006\u0002\b%\u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020&0\u0003H\u0007¢\u0006\u0002\b'\u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020(0\u0003H\u0007¢\u0006\u0002\b)\u001a,\u0010*\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+0\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010,\u001a\u00020$H\u0007\u001aF\u0010*\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010,\u001a\u00020$2\u0018\u0010\u000e\u001a\u0014\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+\u0012\u0004\u0012\u0002H-0\u0005H\u0007\u001a+\u0010.\u001a\u00020\u0001\"\t\b\u0000\u0010\u0002¢\u0006\u0002\b/*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00100\u001a\u0002H\u0002H\u0086\u0002¢\u0006\u0002\u00101\u001a\u0016\u00102\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a-\u00102\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a\u001c\u00103\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a6\u00104\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005\u001a$\u00106\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00107\u001a\u00020$\u001a0\u00108\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005\u001a#\u00109\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010:\u001a\u00020$¢\u0006\u0002\u0010;\u001a7\u0010<\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010:\u001a\u00020$2\u0012\u0010=\u001a\u000e\u0012\u0004\u0012\u00020$\u0012\u0004\u0012\u0002H\u00020\u0005¢\u0006\u0002\u0010>\u001a%\u0010?\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010:\u001a\u00020$¢\u0006\u0002\u0010;\u001a0\u0010@\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005\u001aE\u0010A\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032'\u0010\u0004\u001a#\u0012\u0013\u0012\u00110$¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010B\u001aa\u0010E\u001a\u0002HF\"\u0004\b\u0000\u0010\u0002\"\u0010\b\u0001\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020G*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF2'\u0010\u0004\u001a#\u0012\u0013\u0012\u00110$¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010BH\u0086\b¢\u0006\u0002\u0010H\u001a$\u0010I\u001a\r\u0012\t\u0012\u0007H-¢\u0006\u0002\bJ0\u0003\"\u0006\b\u0000\u0010-\u0018\u0001*\u0006\u0012\u0002\b\u00030\u0003H\u0086\b\u001a8\u0010K\u001a\u0002HF\"\u0006\b\u0000\u0010-\u0018\u0001\"\u0010\b\u0001\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H-0G*\u0006\u0012\u0002\b\u00030\u00032\u0006\u0010\u0016\u001a\u0002HFH\u0086\b¢\u0006\u0002\u0010L\u001a0\u0010M\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005\u001a\"\u0010N\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\b\b\u0000\u0010\u0002*\u00020O*\n\u0012\u0006\u0012\u0004\u0018\u0001H\u00020\u0003\u001a;\u0010P\u001a\u0002HF\"\u0010\b\u0000\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020G\"\b\b\u0001\u0010\u0002*\u00020O*\n\u0012\u0006\u0012\u0004\u0018\u0001H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF¢\u0006\u0002\u0010L\u001aL\u0010Q\u001a\u0002HF\"\u0004\b\u0000\u0010\u0002\"\u0010\b\u0001\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020G*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b¢\u0006\u0002\u0010R\u001aL\u0010S\u001a\u0002HF\"\u0004\b\u0000\u0010\u0002\"\u0010\b\u0001\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020G*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b¢\u0006\u0002\u0010R\u001a4\u0010T\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0087\b¢\u0006\u0002\u0010U\u001a4\u0010V\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0087\b¢\u0006\u0002\u0010U\u001a\u001b\u0010W\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0002\u0010X\u001a2\u0010W\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b¢\u0006\u0002\u0010U\u001a\u001d\u0010Y\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0002\u0010X\u001a4\u0010Y\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b¢\u0006\u0002\u0010U\u001a<\u0010Z\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0018\u0010\u000e\u001a\u0014\u0012\u0004\u0012\u0002H\u0002\u0012\n\u0012\b\u0012\u0004\u0012\u0002H-0\u00030\u0005\u001aX\u0010[\u001a\u0002HF\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-\"\u0010\b\u0002\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H-0G*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF2\u0018\u0010\u000e\u001a\u0014\u0012\u0004\u0012\u0002H\u0002\u0012\n\u0012\b\u0012\u0004\u0012\u0002H-0\u00030\u0005H\u0086\b¢\u0006\u0002\u0010R\u001aU\u0010\\\u001a\u0002H-\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010]\u001a\u0002H-2'\u0010^\u001a#\u0012\u0013\u0012\u0011H-¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(_\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0BH\u0086\b¢\u0006\u0002\u0010`\u001aj\u0010a\u001a\u0002H-\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010]\u001a\u0002H-2<\u0010^\u001a8\u0012\u0013\u0012\u00110$¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0013\u0012\u0011H-¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(_\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0bH\u0086\b¢\u0006\u0002\u0010c\u001a-\u0010d\u001a\u00020e\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010f\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020e0\u0005H\u0086\b\u001aB\u0010g\u001a\u00020e\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032'\u0010f\u001a#\u0012\u0013\u0012\u00110$¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020e0BH\u0086\b\u001aE\u0010h\u001a\u0014\u0012\u0004\u0012\u0002H\f\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+0\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0086\b\u001a_\u0010h\u001a\u0014\u0012\u0004\u0012\u0002H\f\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\r0+0\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u00052\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\r0\u0005H\u0086\b\u001a^\u0010i\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u001c\b\u0002\u0010\u0014*\u0016\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020j0\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0086\b¢\u0006\u0002\u0010\u0017\u001ax\u0010i\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r\"\u001c\b\u0003\u0010\u0014*\u0016\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\r0j0\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u00052\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\r0\u0005H\u0086\b¢\u0006\u0002\u0010\u0018\u001aA\u0010k\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0l\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0014\b\u0004\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0087\b\u001a(\u0010m\u001a\u00020$\"\t\b\u0000\u0010\u0002¢\u0006\u0002\b/*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00100\u001a\u0002H\u0002¢\u0006\u0002\u0010n\u001a-\u0010o\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a-\u0010p\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a{\u0010q\u001a\u0002Hr\"\u0004\b\u0000\u0010\u0002\"\f\b\u0001\u0010r*\u00060sj\u0002`t*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010u\u001a\u0002Hr2\b\b\u0002\u0010v\u001a\u00020w2\b\b\u0002\u0010x\u001a\u00020w2\b\b\u0002\u0010y\u001a\u00020w2\b\b\u0002\u0010z\u001a\u00020$2\b\b\u0002\u0010{\u001a\u00020w2\u0016\b\u0002\u0010\u000e\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020w\u0018\u00010\u0005¢\u0006\u0002\u0010|\u001a`\u0010}\u001a\u00020~\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\b\b\u0002\u0010v\u001a\u00020w2\b\b\u0002\u0010x\u001a\u00020w2\b\b\u0002\u0010y\u001a\u00020w2\b\b\u0002\u0010z\u001a\u00020$2\b\b\u0002\u0010{\u001a\u00020w2\u0016\b\u0002\u0010\u000e\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020w\u0018\u00010\u0005\u001a\u001b\u0010\u007f\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0002\u0010X\u001a2\u0010\u007f\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b¢\u0006\u0002\u0010U\u001a)\u0010\u0080\u0001\u001a\u00020$\"\t\b\u0000\u0010\u0002¢\u0006\u0002\b/*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00100\u001a\u0002H\u0002¢\u0006\u0002\u0010n\u001a\u001e\u0010\u0081\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0002\u0010X\u001a5\u0010\u0081\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b¢\u0006\u0002\u0010U\u001a7\u0010\u0082\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u000e\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005\u001aL\u0010\u0083\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032'\u0010\u000e\u001a#\u0012\u0013\u0012\u00110$¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0B\u001aR\u0010\u0084\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\b\b\u0001\u0010-*\u00020O*\b\u0012\u0004\u0012\u0002H\u00020\u00032)\u0010\u000e\u001a%\u0012\u0013\u0012\u00110$¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0B\u001an\u0010\u0085\u0001\u001a\u0002HF\"\u0004\b\u0000\u0010\u0002\"\b\b\u0001\u0010-*\u00020O\"\u0010\b\u0002\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H-0G*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF2)\u0010\u000e\u001a%\u0012\u0013\u0012\u00110$¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0BH\u0086\b¢\u0006\u0002\u0010H\u001ah\u0010\u0086\u0001\u001a\u0002HF\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-\"\u0010\b\u0002\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H-0G*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF2'\u0010\u000e\u001a#\u0012\u0013\u0012\u00110$¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0BH\u0086\b¢\u0006\u0002\u0010H\u001a=\u0010\u0087\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\b\b\u0001\u0010-*\u00020O*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0014\u0010\u000e\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0\u0005\u001aY\u0010\u0088\u0001\u001a\u0002HF\"\u0004\b\u0000\u0010\u0002\"\b\b\u0001\u0010-*\u00020O\"\u0010\b\u0002\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H-0G*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF2\u0014\u0010\u000e\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0\u0005H\u0086\b¢\u0006\u0002\u0010R\u001aS\u0010\u0089\u0001\u001a\u0002HF\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-\"\u0010\b\u0002\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H-0G*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF2\u0012\u0010\u000e\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0086\b¢\u0006\u0002\u0010R\u001a*\u0010\u008a\u0001\u001a\u0004\u0018\u0001H\u0002\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020\u008b\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0003\u0010\u008c\u0001\u001a\u001b\u0010\u008a\u0001\u001a\u0004\u0018\u00010\u001e*\b\u0012\u0004\u0012\u00020\u001e0\u0003H\u0007¢\u0006\u0003\u0010\u008d\u0001\u001a\u001b\u0010\u008a\u0001\u001a\u0004\u0018\u00010\"*\b\u0012\u0004\u0012\u00020\"0\u0003H\u0007¢\u0006\u0003\u0010\u008e\u0001\u001aF\u0010\u008f\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0\u008b\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0086\b¢\u0006\u0002\u0010U\u001a>\u0010\u0090\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010\u0091\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u0002H\u00020\u0092\u0001j\u000b\u0012\u0006\b\u0000\u0012\u0002H\u0002`\u0093\u0001¢\u0006\u0003\u0010\u0094\u0001\u001a*\u0010\u0095\u0001\u001a\u0004\u0018\u0001H\u0002\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020\u008b\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0003\u0010\u008c\u0001\u001a\u001b\u0010\u0095\u0001\u001a\u0004\u0018\u00010\u001e*\b\u0012\u0004\u0012\u00020\u001e0\u0003H\u0007¢\u0006\u0003\u0010\u008d\u0001\u001a\u001b\u0010\u0095\u0001\u001a\u0004\u0018\u00010\"*\b\u0012\u0004\u0012\u00020\"0\u0003H\u0007¢\u0006\u0003\u0010\u008e\u0001\u001aF\u0010\u0096\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0\u008b\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0086\b¢\u0006\u0002\u0010U\u001a>\u0010\u0097\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010\u0091\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u0002H\u00020\u0092\u0001j\u000b\u0012\u0006\b\u0000\u0012\u0002H\u0002`\u0093\u0001¢\u0006\u0003\u0010\u0094\u0001\u001a.\u0010\u0098\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00100\u001a\u0002H\u0002H\u0086\u0002¢\u0006\u0003\u0010\u0099\u0001\u001a8\u0010\u0098\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0010\u0010\u009a\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u0002H\u00020\u009b\u0001H\u0086\u0002¢\u0006\u0003\u0010\u009c\u0001\u001a/\u0010\u0098\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u009a\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\bH\u0086\u0002\u001a/\u0010\u0098\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u009a\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0086\u0002\u001a.\u0010\u009d\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00100\u001a\u0002H\u0002H\u0087\b¢\u0006\u0003\u0010\u0099\u0001\u001a\u0017\u0010\u009e\u0001\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a.\u0010\u009e\u0001\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a3\u0010\u009f\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010f\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020e0\u0005H\u0007\u001aF\u0010 \u0001\u001a\u001a\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+0\u000f\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a.\u0010¡\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00100\u001a\u0002H\u0002H\u0086\u0002¢\u0006\u0003\u0010\u0099\u0001\u001a8\u0010¡\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0010\u0010\u009a\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u0002H\u00020\u009b\u0001H\u0086\u0002¢\u0006\u0003\u0010\u009c\u0001\u001a/\u0010¡\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u009a\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\bH\u0086\u0002\u001a/\u0010¡\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u009a\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0086\u0002\u001a.\u0010¢\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00100\u001a\u0002H\u0002H\u0087\b¢\u0006\u0003\u0010\u0099\u0001\u001aX\u0010£\u0001\u001a\u0003H¤\u0001\"\u0005\b\u0000\u0010¤\u0001\"\t\b\u0001\u0010\u0002*\u0003H¤\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032)\u0010^\u001a%\u0012\u0014\u0012\u0012H¤\u0001¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(_\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u0003H¤\u00010BH\u0086\b¢\u0006\u0003\u0010¥\u0001\u001am\u0010¦\u0001\u001a\u0003H¤\u0001\"\u0005\b\u0000\u0010¤\u0001\"\t\b\u0001\u0010\u0002*\u0003H¤\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032>\u0010^\u001a:\u0012\u0013\u0012\u00110$¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0014\u0012\u0012H¤\u0001¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(_\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u0003H¤\u00010bH\u0086\b¢\u0006\u0003\u0010§\u0001\u001a#\u0010¨\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\b\b\u0000\u0010\u0002*\u00020O*\n\u0012\u0006\u0012\u0004\u0018\u0001H\u00020\u0003\u001a\u001c\u0010©\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0002\u0010X\u001a3\u0010©\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b¢\u0006\u0002\u0010U\u001a\u001e\u0010ª\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0002\u0010X\u001a5\u0010ª\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b¢\u0006\u0002\u0010U\u001a(\u0010«\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020\u008b\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001aI\u0010¬\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0\u008b\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0016\b\u0004\u00105\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0\u0005H\u0086\b\u001aI\u0010\u00ad\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0\u008b\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0016\b\u0004\u00105\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0\u0005H\u0086\b\u001a(\u0010®\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020\u008b\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a<\u0010¯\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010\u0091\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u0002H\u00020\u0092\u0001j\u000b\u0012\u0006\b\u0000\u0012\u0002H\u0002`\u0093\u0001\u001a\u0019\u0010°\u0001\u001a\u00020$*\b\u0012\u0004\u0012\u00020\u001f0\u0003H\u0007¢\u0006\u0003\b±\u0001\u001a\u0019\u0010°\u0001\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020\u001e0\u0003H\u0007¢\u0006\u0003\b²\u0001\u001a\u0019\u0010°\u0001\u001a\u00020\"*\b\u0012\u0004\u0012\u00020\"0\u0003H\u0007¢\u0006\u0003\b³\u0001\u001a\u0019\u0010°\u0001\u001a\u00020$*\b\u0012\u0004\u0012\u00020$0\u0003H\u0007¢\u0006\u0003\b´\u0001\u001a\u0019\u0010°\u0001\u001a\u00020&*\b\u0012\u0004\u0012\u00020&0\u0003H\u0007¢\u0006\u0003\bµ\u0001\u001a\u0019\u0010°\u0001\u001a\u00020$*\b\u0012\u0004\u0012\u00020(0\u0003H\u0007¢\u0006\u0003\b¶\u0001\u001a.\u0010·\u0001\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020$0\u0005H\u0086\b\u001a.\u0010¸\u0001\u001a\u00020\u001e\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u001e0\u0005H\u0086\b\u001a%\u0010¹\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00107\u001a\u00020$\u001a1\u0010º\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005\u001a6\u0010»\u0001\u001a\u0002HF\"\u0004\b\u0000\u0010\u0002\"\u0010\b\u0001\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020G*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF¢\u0006\u0002\u0010L\u001a)\u0010¼\u0001\u001a\u0014\u0012\u0004\u0012\u0002H\u00020½\u0001j\t\u0012\u0004\u0012\u0002H\u0002`¾\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u001d\u0010¿\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u001d\u0010À\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020j\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u001e\u0010Á\u0001\u001a\t\u0012\u0004\u0012\u0002H\u00020Â\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u001e\u0010Ã\u0001\u001a\t\u0012\u0004\u0012\u0002H\u00020Ä\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001aC\u0010Å\u0001\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+0\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010,\u001a\u00020$2\t\b\u0002\u0010Æ\u0001\u001a\u00020$2\t\b\u0002\u0010Ç\u0001\u001a\u00020\u0001H\u0007\u001a]\u0010Å\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010,\u001a\u00020$2\t\b\u0002\u0010Æ\u0001\u001a\u00020$2\t\b\u0002\u0010Ç\u0001\u001a\u00020\u00012\u0018\u0010\u000e\u001a\u0014\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+\u0012\u0004\u0012\u0002H-0\u0005H\u0007\u001a$\u0010È\u0001\u001a\u000f\u0012\u000b\u0012\t\u0012\u0004\u0012\u0002H\u00020É\u00010\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001aA\u0010Ê\u0001\u001a\u0014\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u000f0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010Ë\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u0003H\u0086\u0004\u001ar\u0010Ê\u0001\u001a\b\u0012\u0004\u0012\u0002H\r0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010Ë\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u000328\u0010\u000e\u001a4\u0012\u0014\u0012\u0012H\u0002¢\u0006\r\bC\u0012\t\bD\u0012\u0005\b\b(Ì\u0001\u0012\u0014\u0012\u0012H-¢\u0006\r\bC\u0012\t\bD\u0012\u0005\b\b(Í\u0001\u0012\u0004\u0012\u0002H\r0B\u001a+\u0010Î\u0001\u001a\u0014\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\u00020\u000f0\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0007\u001a_\u0010Î\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u000328\u0010\u000e\u001a4\u0012\u0014\u0012\u0012H\u0002¢\u0006\r\bC\u0012\t\bD\u0012\u0005\b\b(Ì\u0001\u0012\u0014\u0012\u0012H\u0002¢\u0006\r\bC\u0012\t\bD\u0012\u0005\b\b(Í\u0001\u0012\u0004\u0012\u0002H-0BH\u0007¨\u0006Ï\u0001"},
   d2 = {"all", "", "T", "Lkotlin/sequences/Sequence;", "predicate", "Lkotlin/Function1;", "any", "asIterable", "", "asSequence", "associate", "", "K", "V", "transform", "Lkotlin/Pair;", "associateBy", "keySelector", "valueTransform", "associateByTo", "M", "", "destination", "(Lkotlin/sequences/Sequence;Ljava/util/Map;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "(Lkotlin/sequences/Sequence;Ljava/util/Map;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "associateTo", "associateWith", "valueSelector", "associateWithTo", "average", "", "", "averageOfByte", "averageOfDouble", "", "averageOfFloat", "", "averageOfInt", "", "averageOfLong", "", "averageOfShort", "chunked", "", "size", "R", "contains", "Lkotlin/internal/OnlyInputTypes;", "element", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;)Z", "count", "distinct", "distinctBy", "selector", "drop", "n", "dropWhile", "elementAt", "index", "(Lkotlin/sequences/Sequence;I)Ljava/lang/Object;", "elementAtOrElse", "defaultValue", "(Lkotlin/sequences/Sequence;ILkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "elementAtOrNull", "filter", "filterIndexed", "Lkotlin/Function2;", "Lkotlin/ParameterName;", "name", "filterIndexedTo", "C", "", "(Lkotlin/sequences/Sequence;Ljava/util/Collection;Lkotlin/jvm/functions/Function2;)Ljava/util/Collection;", "filterIsInstance", "Lkotlin/internal/NoInfer;", "filterIsInstanceTo", "(Lkotlin/sequences/Sequence;Ljava/util/Collection;)Ljava/util/Collection;", "filterNot", "filterNotNull", "", "filterNotNullTo", "filterNotTo", "(Lkotlin/sequences/Sequence;Ljava/util/Collection;Lkotlin/jvm/functions/Function1;)Ljava/util/Collection;", "filterTo", "find", "(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "findLast", "first", "(Lkotlin/sequences/Sequence;)Ljava/lang/Object;", "firstOrNull", "flatMap", "flatMapTo", "fold", "initial", "operation", "acc", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "foldIndexed", "Lkotlin/Function3;", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "forEach", "", "action", "forEachIndexed", "groupBy", "groupByTo", "", "groupingBy", "Lkotlin/collections/Grouping;", "indexOf", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;)I", "indexOfFirst", "indexOfLast", "joinTo", "A", "Ljava/lang/Appendable;", "Lkotlin/text/Appendable;", "buffer", "separator", "", "prefix", "postfix", "limit", "truncated", "(Lkotlin/sequences/Sequence;Ljava/lang/Appendable;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Appendable;", "joinToString", "", "last", "lastIndexOf", "lastOrNull", "map", "mapIndexed", "mapIndexedNotNull", "mapIndexedNotNullTo", "mapIndexedTo", "mapNotNull", "mapNotNullTo", "mapTo", "max", "", "(Lkotlin/sequences/Sequence;)Ljava/lang/Comparable;", "(Lkotlin/sequences/Sequence;)Ljava/lang/Double;", "(Lkotlin/sequences/Sequence;)Ljava/lang/Float;", "maxBy", "maxWith", "comparator", "Ljava/util/Comparator;", "Lkotlin/Comparator;", "(Lkotlin/sequences/Sequence;Ljava/util/Comparator;)Ljava/lang/Object;", "min", "minBy", "minWith", "minus", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;)Lkotlin/sequences/Sequence;", "elements", "", "(Lkotlin/sequences/Sequence;[Ljava/lang/Object;)Lkotlin/sequences/Sequence;", "minusElement", "none", "onEach", "partition", "plus", "plusElement", "reduce", "S", "(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "reduceIndexed", "(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "requireNoNulls", "single", "singleOrNull", "sorted", "sortedBy", "sortedByDescending", "sortedDescending", "sortedWith", "sum", "sumOfByte", "sumOfDouble", "sumOfFloat", "sumOfInt", "sumOfLong", "sumOfShort", "sumBy", "sumByDouble", "take", "takeWhile", "toCollection", "toHashSet", "Ljava/util/HashSet;", "Lkotlin/collections/HashSet;", "toList", "toMutableList", "toMutableSet", "", "toSet", "", "windowed", "step", "partialWindows", "withIndex", "Lkotlin/collections/IndexedValue;", "zip", "other", "a", "b", "zipWithNext", "kotlin-stdlib"},
   xs = "kotlin/sequences/SequencesKt"
)
class SequencesKt___SequencesKt extends SequencesKt___SequencesJvmKt {
   public static final <T> boolean contains(@NotNull Sequence<? extends T> $this$contains, T element) {
      Intrinsics.checkParameterIsNotNull($this$contains, "$this$contains");
      return SequencesKt.indexOf($this$contains, element) >= 0;
   }

   public static final <T> T elementAt(@NotNull Sequence<? extends T> $this$elementAt, final int index) {
      Intrinsics.checkParameterIsNotNull($this$elementAt, "$this$elementAt");
      return SequencesKt.elementAtOrElse($this$elementAt, index, (Function1)(new Function1() {
         @NotNull
         public final Void invoke(int it) {
            throw (Throwable)(new IndexOutOfBoundsException("Sequence doesn't contain element at index " + index + '.'));
         }
      }));
   }

   public static final <T> T elementAtOrElse(@NotNull Sequence<? extends T> $this$elementAtOrElse, int index, @NotNull Function1<? super Integer, ? extends T> defaultValue) {
      Intrinsics.checkParameterIsNotNull($this$elementAtOrElse, "$this$elementAtOrElse");
      Intrinsics.checkParameterIsNotNull(defaultValue, "defaultValue");
      if (index < 0) {
         return defaultValue.invoke(index);
      } else {
         Iterator iterator = $this$elementAtOrElse.iterator();
         int var4 = 0;

         Object element;
         do {
            if (!iterator.hasNext()) {
               return defaultValue.invoke(index);
            }

            element = iterator.next();
         } while(index != var4++);

         return element;
      }
   }

   @Nullable
   public static final <T> T elementAtOrNull(@NotNull Sequence<? extends T> $this$elementAtOrNull, int index) {
      Intrinsics.checkParameterIsNotNull($this$elementAtOrNull, "$this$elementAtOrNull");
      if (index < 0) {
         return null;
      } else {
         Iterator iterator = $this$elementAtOrNull.iterator();
         int var3 = 0;

         Object element;
         do {
            if (!iterator.hasNext()) {
               return null;
            }

            element = iterator.next();
         } while(index != var3++);

         return element;
      }
   }

   @InlineOnly
   private static final <T> T find(@NotNull Sequence<? extends T> $this$find, Function1<? super T, Boolean> predicate) {
      int $i$f$find = 0;
      int $i$f$firstOrNull = false;
      Iterator var5 = $this$find.iterator();

      Object var10000;
      while(true) {
         if (var5.hasNext()) {
            Object element$iv = var5.next();
            if (!(Boolean)predicate.invoke(element$iv)) {
               continue;
            }

            var10000 = element$iv;
            break;
         }

         var10000 = null;
         break;
      }

      return var10000;
   }

   @InlineOnly
   private static final <T> T findLast(@NotNull Sequence<? extends T> $this$findLast, Function1<? super T, Boolean> predicate) {
      int $i$f$findLast = 0;
      int $i$f$lastOrNull = false;
      Object last$iv = null;
      Iterator var6 = $this$findLast.iterator();

      while(var6.hasNext()) {
         Object element$iv = var6.next();
         if ((Boolean)predicate.invoke(element$iv)) {
            last$iv = element$iv;
         }
      }

      return last$iv;
   }

   public static final <T> T first(@NotNull Sequence<? extends T> $this$first) {
      Intrinsics.checkParameterIsNotNull($this$first, "$this$first");
      Iterator iterator = $this$first.iterator();
      if (!iterator.hasNext()) {
         throw (Throwable)(new NoSuchElementException("Sequence is empty."));
      } else {
         return iterator.next();
      }
   }

   public static final <T> T first(@NotNull Sequence<? extends T> $this$first, @NotNull Function1<? super T, Boolean> predicate) {
      int $i$f$first = 0;
      Intrinsics.checkParameterIsNotNull($this$first, "$this$first");
      Intrinsics.checkParameterIsNotNull(predicate, "predicate");
      Iterator var4 = $this$first.iterator();

      Object element;
      do {
         if (!var4.hasNext()) {
            throw (Throwable)(new NoSuchElementException("Sequence contains no element matching the predicate."));
         }

         element = var4.next();
      } while(!(Boolean)predicate.invoke(element));

      return element;
   }

   @Nullable
   public static final <T> T firstOrNull(@NotNull Sequence<? extends T> $this$firstOrNull) {
      Intrinsics.checkParameterIsNotNull($this$firstOrNull, "$this$firstOrNull");
      Iterator iterator = $this$firstOrNull.iterator();
      return !iterator.hasNext() ? null : iterator.next();
   }

   @Nullable
   public static final <T> T firstOrNull(@NotNull Sequence<? extends T> $this$firstOrNull, @NotNull Function1<? super T, Boolean> predicate) {
      int $i$f$firstOrNull = 0;
      Intrinsics.checkParameterIsNotNull($this$firstOrNull, "$this$firstOrNull");
      Intrinsics.checkParameterIsNotNull(predicate, "predicate");
      Iterator var4 = $this$firstOrNull.iterator();

      Object element;
      do {
         if (!var4.hasNext()) {
            return null;
         }

         element = var4.next();
      } while(!(Boolean)predicate.invoke(element));

      return element;
   }

   public static final <T> int indexOf(@NotNull Sequence<? extends T> $this$indexOf, T element) {
      Intrinsics.checkParameterIsNotNull($this$indexOf, "$this$indexOf");
      int index = 0;

      for(Iterator var4 = $this$indexOf.iterator(); var4.hasNext(); ++index) {
         Object item = var4.next();
         boolean var5 = false;
         if (index < 0) {
            CollectionsKt.throwIndexOverflow();
         }

         if (Intrinsics.areEqual(element, item)) {
            return index;
         }
      }

      return -1;
   }

   public static final <T> int indexOfFirst(@NotNull Sequence<? extends T> $this$indexOfFirst, @NotNull Function1<? super T, Boolean> predicate) {
      int $i$f$indexOfFirst = 0;
      Intrinsics.checkParameterIsNotNull($this$indexOfFirst, "$this$indexOfFirst");
      Intrinsics.checkParameterIsNotNull(predicate, "predicate");
      int index = 0;

      for(Iterator var5 = $this$indexOfFirst.iterator(); var5.hasNext(); ++index) {
         Object item = var5.next();
         boolean var6 = false;
         if (index < 0) {
            if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
               throw (Throwable)(new ArithmeticException("Index overflow has happened."));
            }

            CollectionsKt.throwIndexOverflow();
         }

         if ((Boolean)predicate.invoke(item)) {
            return index;
         }
      }

      return -1;
   }

   public static final <T> int indexOfLast(@NotNull Sequence<? extends T> $this$indexOfLast, @NotNull Function1<? super T, Boolean> predicate) {
      int $i$f$indexOfLast = 0;
      Intrinsics.checkParameterIsNotNull($this$indexOfLast, "$this$indexOfLast");
      Intrinsics.checkParameterIsNotNull(predicate, "predicate");
      int lastIndex = -1;
      int index = 0;

      for(Iterator var6 = $this$indexOfLast.iterator(); var6.hasNext(); ++index) {
         Object item = var6.next();
         boolean var7 = false;
         if (index < 0) {
            if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
               throw (Throwable)(new ArithmeticException("Index overflow has happened."));
            }

            CollectionsKt.throwIndexOverflow();
         }

         if ((Boolean)predicate.invoke(item)) {
            lastIndex = index;
         }
      }

      return lastIndex;
   }

   public static final <T> T last(@NotNull Sequence<? extends T> $this$last) {
      Intrinsics.checkParameterIsNotNull($this$last, "$this$last");
      Iterator iterator = $this$last.iterator();
      if (!iterator.hasNext()) {
         throw (Throwable)(new NoSuchElementException("Sequence is empty."));
      } else {
         Object last;
         for(last = iterator.next(); iterator.hasNext(); last = iterator.next()) {
         }

         return last;
      }
   }

   public static final <T> T last(@NotNull Sequence<? extends T> $this$last, @NotNull Function1<? super T, Boolean> predicate) {
      int $i$f$last = 0;
      Intrinsics.checkParameterIsNotNull($this$last, "$this$last");
      Intrinsics.checkParameterIsNotNull(predicate, "predicate");
      Object last = null;
      boolean found = false;
      Iterator var6 = $this$last.iterator();

      while(var6.hasNext()) {
         Object element = var6.next();
         if ((Boolean)predicate.invoke(element)) {
            last = element;
            found = true;
         }
      }

      if (!found) {
         throw (Throwable)(new NoSuchElementException("Sequence contains no element matching the predicate."));
      } else {
         return last;
      }
   }

   public static final <T> int lastIndexOf(@NotNull Sequence<? extends T> $this$lastIndexOf, T element) {
      Intrinsics.checkParameterIsNotNull($this$lastIndexOf, "$this$lastIndexOf");
      int lastIndex = -1;
      int index = 0;

      for(Iterator var5 = $this$lastIndexOf.iterator(); var5.hasNext(); ++index) {
         Object item = var5.next();
         boolean var6 = false;
         if (index < 0) {
            CollectionsKt.throwIndexOverflow();
         }

         if (Intrinsics.areEqual(element, item)) {
            lastIndex = index;
         }
      }

      return lastIndex;
   }

   @Nullable
   public static final <T> T lastOrNull(@NotNull Sequence<? extends T> $this$lastOrNull) {
      Intrinsics.checkParameterIsNotNull($this$lastOrNull, "$this$lastOrNull");
      Iterator iterator = $this$lastOrNull.iterator();
      if (!iterator.hasNext()) {
         return null;
      } else {
         Object last;
         for(last = iterator.next(); iterator.hasNext(); last = iterator.next()) {
         }

         return last;
      }
   }

   @Nullable
   public static final <T> T lastOrNull(@NotNull Sequence<? extends T> $this$lastOrNull, @NotNull Function1<? super T, Boolean> predicate) {
      int $i$f$lastOrNull = 0;
      Intrinsics.checkParameterIsNotNull($this$lastOrNull, "$this$lastOrNull");
      Intrinsics.checkParameterIsNotNull(predicate, "predicate");
      Object last = null;
      Iterator var5 = $this$lastOrNull.iterator();

      while(var5.hasNext()) {
         Object element = var5.next();
         if ((Boolean)predicate.invoke(element)) {
            last = element;
         }
      }

      return last;
   }

   public static final <T> T single(@NotNull Sequence<? extends T> $this$single) {
      Intrinsics.checkParameterIsNotNull($this$single, "$this$single");
      Iterator iterator = $this$single.iterator();
      if (!iterator.hasNext()) {
         throw (Throwable)(new NoSuchElementException("Sequence is empty."));
      } else {
         Object single = iterator.next();
         if (iterator.hasNext()) {
            throw (Throwable)(new IllegalArgumentException("Sequence has more than one element."));
         } else {
            return single;
         }
      }
   }

   public static final <T> T single(@NotNull Sequence<? extends T> $this$single, @NotNull Function1<? super T, Boolean> predicate) {
      int $i$f$single = 0;
      Intrinsics.checkParameterIsNotNull($this$single, "$this$single");
      Intrinsics.checkParameterIsNotNull(predicate, "predicate");
      Object single = null;
      boolean found = false;
      Iterator var6 = $this$single.iterator();

      while(var6.hasNext()) {
         Object element = var6.next();
         if ((Boolean)predicate.invoke(element)) {
            if (found) {
               throw (Throwable)(new IllegalArgumentException("Sequence contains more than one matching element."));
            }

            single = element;
            found = true;
         }
      }

      if (!found) {
         throw (Throwable)(new NoSuchElementException("Sequence contains no element matching the predicate."));
      } else {
         return single;
      }
   }

   @Nullable
   public static final <T> T singleOrNull(@NotNull Sequence<? extends T> $this$singleOrNull) {
      Intrinsics.checkParameterIsNotNull($this$singleOrNull, "$this$singleOrNull");
      Iterator iterator = $this$singleOrNull.iterator();
      if (!iterator.hasNext()) {
         return null;
      } else {
         Object single = iterator.next();
         return iterator.hasNext() ? null : single;
      }
   }

   @Nullable
   public static final <T> T singleOrNull(@NotNull Sequence<? extends T> $this$singleOrNull, @NotNull Function1<? super T, Boolean> predicate) {
      int $i$f$singleOrNull = 0;
      Intrinsics.checkParameterIsNotNull($this$singleOrNull, "$this$singleOrNull");
      Intrinsics.checkParameterIsNotNull(predicate, "predicate");
      Object single = null;
      boolean found = false;
      Iterator var6 = $this$singleOrNull.iterator();

      while(var6.hasNext()) {
         Object element = var6.next();
         if ((Boolean)predicate.invoke(element)) {
            if (found) {
               return null;
            }

            single = element;
            found = true;
         }
      }

      if (!found) {
         return null;
      } else {
         return single;
      }
   }

   @NotNull
   public static final <T> Sequence<T> drop(@NotNull Sequence<? extends T> $this$drop, int n) {
      Intrinsics.checkParameterIsNotNull($this$drop, "$this$drop");
      boolean var2 = n >= 0;
      boolean var3 = false;
      boolean var4 = false;
      if (!var2) {
         int var5 = false;
         String var6 = "Requested element count " + n + " is less than zero.";
         throw (Throwable)(new IllegalArgumentException(var6.toString()));
      } else {
         return n == 0 ? $this$drop : ($this$drop instanceof DropTakeSequence ? ((DropTakeSequence)$this$drop).drop(n) : (Sequence)(new DropSequence($this$drop, n)));
      }
   }

   @NotNull
   public static final <T> Sequence<T> dropWhile(@NotNull Sequence<? extends T> $this$dropWhile, @NotNull Function1<? super T, Boolean> predicate) {
      Intrinsics.checkParameterIsNotNull($this$dropWhile, "$this$dropWhile");
      Intrinsics.checkParameterIsNotNull(predicate, "predicate");
      return (Sequence)(new DropWhileSequence($this$dropWhile, predicate));
   }

   @NotNull
   public static final <T> Sequence<T> filter(@NotNull Sequence<? extends T> $this$filter, @NotNull Function1<? super T, Boolean> predicate) {
      Intrinsics.checkParameterIsNotNull($this$filter, "$this$filter");
      Intrinsics.checkParameterIsNotNull(predicate, "predicate");
      return (Sequence)(new FilteringSequence($this$filter, true, predicate));
   }

   @NotNull
   public static final <T> Sequence<T> filterIndexed(@NotNull Sequence<? extends T> $this$filterIndexed, @NotNull final Function2<? super Integer, ? super T, Boolean> predicate) {
      Intrinsics.checkParameterIsNotNull($this$filterIndexed, "$this$filterIndexed");
      Intrinsics.checkParameterIsNotNull(predicate, "predicate");
      return (Sequence)(new TransformingSequence((Sequence)(new FilteringSequence((Sequence)(new IndexingSequence($this$filterIndexed)), true, (Function1)(new Function1<IndexedValue<? extends T>, Boolean>() {
         public final boolean invoke(@NotNull IndexedValue<? extends T> it) {
            Intrinsics.checkParameterIsNotNull(it, "it");
            return (Boolean)predicate.invoke(it.getIndex(), it.getValue());
         }
      }))), (Function1)null.INSTANCE));
   }

   @NotNull
   public static final <T, C extends Collection<? super T>> C filterIndexedTo(@NotNull Sequence<? extends T> $this$filterIndexedTo, @NotNull C destination, @NotNull Function2<? super Integer, ? super T, Boolean> predicate) {
      int $i$f$filterIndexedTo = 0;
      Intrinsics.checkParameterIsNotNull($this$filterIndexedTo, "$this$filterIndexedTo");
      Intrinsics.checkParameterIsNotNull(destination, "destination");
      Intrinsics.checkParameterIsNotNull(predicate, "predicate");
      int $i$f$forEachIndexed = false;
      int index$iv = 0;
      Iterator var7 = $this$filterIndexedTo.iterator();

      while(var7.hasNext()) {
         Object item$iv = var7.next();
         int var9 = index$iv++;
         boolean var10 = false;
         if (var9 < 0) {
            if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
               throw (Throwable)(new ArithmeticException("Index overflow has happened."));
            }

            CollectionsKt.throwIndexOverflow();
         }

         int var14 = false;
         if ((Boolean)predicate.invoke(var9, item$iv)) {
            destination.add(item$iv);
         }
      }

      return destination;
   }

   // $FF: synthetic method
   @NotNull
   public static final <R> Sequence<R> filterIsInstance(@NotNull Sequence<?> $this$filterIsInstance) {
      int $i$f$filterIsInstance = 0;
      Intrinsics.checkParameterIsNotNull($this$filterIsInstance, "$this$filterIsInstance");
      Intrinsics.needClassReification();
      return SequencesKt.filter($this$filterIsInstance, (Function1)null.INSTANCE);
   }

   // $FF: synthetic method
   @NotNull
   public static final <R, C extends Collection<? super R>> C filterIsInstanceTo(@NotNull Sequence<?> $this$filterIsInstanceTo, @NotNull C destination) {
      int $i$f$filterIsInstanceTo = 0;
      Intrinsics.checkParameterIsNotNull($this$filterIsInstanceTo, "$this$filterIsInstanceTo");
      Intrinsics.checkParameterIsNotNull(destination, "destination");
      Iterator var4 = $this$filterIsInstanceTo.iterator();

      while(var4.hasNext()) {
         Object element = var4.next();
         Intrinsics.reifiedOperationMarker(3, "R");
         if (element instanceof Object) {
            destination.add(element);
         }
      }

      return destination;
   }

   @NotNull
   public static final <T> Sequence<T> filterNot(@NotNull Sequence<? extends T> $this$filterNot, @NotNull Function1<? super T, Boolean> predicate) {
      Intrinsics.checkParameterIsNotNull($this$filterNot, "$this$filterNot");
      Intrinsics.checkParameterIsNotNull(predicate, "predicate");
      return (Sequence)(new FilteringSequence($this$filterNot, false, predicate));
   }

   @NotNull
   public static final <T> Sequence<T> filterNotNull(@NotNull Sequence<? extends T> $this$filterNotNull) {
      Intrinsics.checkParameterIsNotNull($this$filterNotNull, "$this$filterNotNull");
      return SequencesKt.filterNot($this$filterNotNull, (Function1)null.INSTANCE);
   }

   @NotNull
   public static final <C extends Collection<? super T>, T> C filterNotNullTo(@NotNull Sequence<? extends T> $this$filterNotNullTo, @NotNull C destination) {
      Intrinsics.checkParameterIsNotNull($this$filterNotNullTo, "$this$filterNotNullTo");
      Intrinsics.checkParameterIsNotNull(destination, "destination");
      Iterator var3 = $this$filterNotNullTo.iterator();

      while(var3.hasNext()) {
         Object element = var3.next();
         if (element != null) {
            destination.add(element);
         }
      }

      return destination;
   }

   @NotNull
   public static final <T, C extends Collection<? super T>> C filterNotTo(@NotNull Sequence<? extends T> $this$filterNotTo, @NotNull C destination, @NotNull Function1<? super T, Boolean> predicate) {
      int $i$f$filterNotTo = 0;
      Intrinsics.checkParameterIsNotNull($this$filterNotTo, "$this$filterNotTo");
      Intrinsics.checkParameterIsNotNull(destination, "destination");
      Intrinsics.checkParameterIsNotNull(predicate, "predicate");
      Iterator var5 = $this$filterNotTo.iterator();

      while(var5.hasNext()) {
         Object element = var5.next();
         if (!(Boolean)predicate.invoke(element)) {
            destination.add(element);
         }
      }

      return destination;
   }

   @NotNull
   public static final <T, C extends Collection<? super T>> C filterTo(@NotNull Sequence<? extends T> $this$filterTo, @NotNull C destination, @NotNull Function1<? super T, Boolean> predicate) {
      int $i$f$filterTo = 0;
      Intrinsics.checkParameterIsNotNull($this$filterTo, "$this$filterTo");
      Intrinsics.checkParameterIsNotNull(destination, "destination");
      Intrinsics.checkParameterIsNotNull(predicate, "predicate");
      Iterator var5 = $this$filterTo.iterator();

      while(var5.hasNext()) {
         Object element = var5.next();
         if ((Boolean)predicate.invoke(element)) {
            destination.add(element);
         }
      }

      return destination;
   }

   @NotNull
   public static final <T> Sequence<T> take(@NotNull Sequence<? extends T> $this$take, int n) {
      Intrinsics.checkParameterIsNotNull($this$take, "$this$take");
      boolean var2 = n >= 0;
      boolean var3 = false;
      boolean var4 = false;
      if (!var2) {
         int var5 = false;
         String var6 = "Requested element count " + n + " is less than zero.";
         throw (Throwable)(new IllegalArgumentException(var6.toString()));
      } else {
         return n == 0 ? SequencesKt.emptySequence() : ($this$take instanceof DropTakeSequence ? ((DropTakeSequence)$this$take).take(n) : (Sequence)(new TakeSequence($this$take, n)));
      }
   }

   @NotNull
   public static final <T> Sequence<T> takeWhile(@NotNull Sequence<? extends T> $this$takeWhile, @NotNull Function1<? super T, Boolean> predicate) {
      Intrinsics.checkParameterIsNotNull($this$takeWhile, "$this$takeWhile");
      Intrinsics.checkParameterIsNotNull(predicate, "predicate");
      return (Sequence)(new TakeWhileSequence($this$takeWhile, predicate));
   }

   @NotNull
   public static final <T extends Comparable<? super T>> Sequence<T> sorted(@NotNull final Sequence<? extends T> $this$sorted) {
      Intrinsics.checkParameterIsNotNull($this$sorted, "$this$sorted");
      return (Sequence)(new Sequence<T>() {
         @NotNull
         public Iterator<T> iterator() {
            List sortedList = SequencesKt.toMutableList($this$sorted);
            CollectionsKt.sort(sortedList);
            return sortedList.iterator();
         }
      });
   }

   @NotNull
   public static final <T, R extends Comparable<? super R>> Sequence<T> sortedBy(@NotNull Sequence<? extends T> $this$sortedBy, @NotNull Function1<? super T, ? extends R> selector) {
      // $FF: Couldn't be decompiled
   }

   @NotNull
   public static final <T, R extends Comparable<? super R>> Sequence<T> sortedByDescending(@NotNull Sequence<? extends T> $this$sortedByDescending, @NotNull Function1<? super T, ? extends R> selector) {
      // $FF: Couldn't be decompiled
   }

   @NotNull
   public static final <T extends Comparable<? super T>> Sequence<T> sortedDescending(@NotNull Sequence<? extends T> $this$sortedDescending) {
      Intrinsics.checkParameterIsNotNull($this$sortedDescending, "$this$sortedDescending");
      return SequencesKt.sortedWith($this$sortedDescending, ComparisonsKt.reverseOrder());
   }

   @NotNull
   public static final <T> Sequence<T> sortedWith(@NotNull final Sequence<? extends T> $this$sortedWith, @NotNull final Comparator<? super T> comparator) {
      Intrinsics.checkParameterIsNotNull($this$sortedWith, "$this$sortedWith");
      Intrinsics.checkParameterIsNotNull(comparator, "comparator");
      return (Sequence)(new Sequence<T>() {
         @NotNull
         public Iterator<T> iterator() {
            List sortedList = SequencesKt.toMutableList($this$sortedWith);
            CollectionsKt.sortWith(sortedList, comparator);
            return sortedList.iterator();
         }
      });
   }

   @NotNull
   public static final <T, K, V> Map<K, V> associate(@NotNull Sequence<? extends T> $this$associate, @NotNull Function1<? super T, ? extends Pair<? extends K, ? extends V>> transform) {
      int $i$f$associate = 0;
      Intrinsics.checkParameterIsNotNull($this$associate, "$this$associate");
      Intrinsics.checkParameterIsNotNull(transform, "transform");
      Map destination$iv = (Map)(new LinkedHashMap());
      int $i$f$associateTo = false;
      Iterator var6 = $this$associate.iterator();

      while(var6.hasNext()) {
         Object element$iv = var6.next();
         Pair var9 = (Pair)transform.invoke(element$iv);
         boolean var10 = false;
         destination$iv.put(var9.getFirst(), var9.getSecond());
      }

      return destination$iv;
   }

   @NotNull
   public static final <T, K> Map<K, T> associateBy(@NotNull Sequence<? extends T> $this$associateBy, @NotNull Function1<? super T, ? extends K> keySelector) {
      int $i$f$associateBy = 0;
      Intrinsics.checkParameterIsNotNull($this$associateBy, "$this$associateBy");
      Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");
      Map destination$iv = (Map)(new LinkedHashMap());
      int $i$f$associateByTo = false;
      Iterator var6 = $this$associateBy.iterator();

      while(var6.hasNext()) {
         Object element$iv = var6.next();
         destination$iv.put(keySelector.invoke(element$iv), element$iv);
      }

      return destination$iv;
   }

   @NotNull
   public static final <T, K, V> Map<K, V> associateBy(@NotNull Sequence<? extends T> $this$associateBy, @NotNull Function1<? super T, ? extends K> keySelector, @NotNull Function1<? super T, ? extends V> valueTransform) {
      int $i$f$associateBy = 0;
      Intrinsics.checkParameterIsNotNull($this$associateBy, "$this$associateBy");
      Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");
      Intrinsics.checkParameterIsNotNull(valueTransform, "valueTransform");
      Map destination$iv = (Map)(new LinkedHashMap());
      int $i$f$associateByTo = false;
      Iterator var7 = $this$associateBy.iterator();

      while(var7.hasNext()) {
         Object element$iv = var7.next();
         destination$iv.put(keySelector.invoke(element$iv), valueTransform.invoke(element$iv));
      }

      return destination$iv;
   }

   @NotNull
   public static final <T, K, M extends Map<? super K, ? super T>> M associateByTo(@NotNull Sequence<? extends T> $this$associateByTo, @NotNull M destination, @NotNull Function1<? super T, ? extends K> keySelector) {
      int $i$f$associateByTo = 0;
      Intrinsics.checkParameterIsNotNull($this$associateByTo, "$this$associateByTo");
      Intrinsics.checkParameterIsNotNull(destination, "destination");
      Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");
      Iterator var5 = $this$associateByTo.iterator();

      while(var5.hasNext()) {
         Object element = var5.next();
         destination.put(keySelector.invoke(element), element);
      }

      return destination;
   }

   @NotNull
   public static final <T, K, V, M extends Map<? super K, ? super V>> M associateByTo(@NotNull Sequence<? extends T> $this$associateByTo, @NotNull M destination, @NotNull Function1<? super T, ? extends K> keySelector, @NotNull Function1<? super T, ? extends V> valueTransform) {
      int $i$f$associateByTo = 0;
      Intrinsics.checkParameterIsNotNull($this$associateByTo, "$this$associateByTo");
      Intrinsics.checkParameterIsNotNull(destination, "destination");
      Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");
      Intrinsics.checkParameterIsNotNull(valueTransform, "valueTransform");
      Iterator var6 = $this$associateByTo.iterator();

      while(var6.hasNext()) {
         Object element = var6.next();
         destination.put(keySelector.invoke(element), valueTransform.invoke(element));
      }

      return destination;
   }

   @NotNull
   public static final <T, K, V, M extends Map<? super K, ? super V>> M associateTo(@NotNull Sequence<? extends T> $this$associateTo, @NotNull M destination, @NotNull Function1<? super T, ? extends Pair<? extends K, ? extends V>> transform) {
      int $i$f$associateTo = 0;
      Intrinsics.checkParameterIsNotNull($this$associateTo, "$this$associateTo");
      Intrinsics.checkParameterIsNotNull(destination, "destination");
      Intrinsics.checkParameterIsNotNull(transform, "transform");
      Iterator var5 = $this$associateTo.iterator();

      while(var5.hasNext()) {
         Object element = var5.next();
         Pair var7 = (Pair)transform.invoke(element);
         boolean var8 = false;
         destination.put(var7.getFirst(), var7.getSecond());
      }

      return destination;
   }

   @SinceKotlin(
      version = "1.3"
   )
   @NotNull
   public static final <K, V> Map<K, V> associateWith(@NotNull Sequence<? extends K> $this$associateWith, @NotNull Function1<? super K, ? extends V> valueSelector) {
      int $i$f$associateWith = 0;
      Intrinsics.checkParameterIsNotNull($this$associateWith, "$this$associateWith");
      Intrinsics.checkParameterIsNotNull(valueSelector, "valueSelector");
      LinkedHashMap result = new LinkedHashMap();
      int $i$f$associateWithTo = false;
      Iterator var6 = $this$associateWith.iterator();

      while(var6.hasNext()) {
         Object element$iv = var6.next();
         ((Map)result).put(element$iv, valueSelector.invoke(element$iv));
      }

      return (Map)result;
   }

   @SinceKotlin(
      version = "1.3"
   )
   @NotNull
   public static final <K, V, M extends Map<? super K, ? super V>> M associateWithTo(@NotNull Sequence<? extends K> $this$associateWithTo, @NotNull M destination, @NotNull Function1<? super K, ? extends V> valueSelector) {
      int $i$f$associateWithTo = 0;
      Intrinsics.checkParameterIsNotNull($this$associateWithTo, "$this$associateWithTo");
      Intrinsics.checkParameterIsNotNull(destination, "destination");
      Intrinsics.checkParameterIsNotNull(valueSelector, "valueSelector");
      Iterator var5 = $this$associateWithTo.iterator();

      while(var5.hasNext()) {
         Object element = var5.next();
         destination.put(element, valueSelector.invoke(element));
      }

      return destination;
   }

   @NotNull
   public static final <T, C extends Collection<? super T>> C toCollection(@NotNull Sequence<? extends T> $this$toCollection, @NotNull C destination) {
      Intrinsics.checkParameterIsNotNull($this$toCollection, "$this$toCollection");
      Intrinsics.checkParameterIsNotNull(destination, "destination");
      Iterator var3 = $this$toCollection.iterator();

      while(var3.hasNext()) {
         Object item = var3.next();
         destination.add(item);
      }

      return destination;
   }

   @NotNull
   public static final <T> HashSet<T> toHashSet(@NotNull Sequence<? extends T> $this$toHashSet) {
      Intrinsics.checkParameterIsNotNull($this$toHashSet, "$this$toHashSet");
      return (HashSet)SequencesKt.toCollection($this$toHashSet, (Collection)(new HashSet()));
   }

   @NotNull
   public static final <T> List<T> toList(@NotNull Sequence<? extends T> $this$toList) {
      Intrinsics.checkParameterIsNotNull($this$toList, "$this$toList");
      return CollectionsKt.optimizeReadOnlyList(SequencesKt.toMutableList($this$toList));
   }

   @NotNull
   public static final <T> List<T> toMutableList(@NotNull Sequence<? extends T> $this$toMutableList) {
      Intrinsics.checkParameterIsNotNull($this$toMutableList, "$this$toMutableList");
      return (List)SequencesKt.toCollection($this$toMutableList, (Collection)(new ArrayList()));
   }

   @NotNull
   public static final <T> Set<T> toSet(@NotNull Sequence<? extends T> $this$toSet) {
      Intrinsics.checkParameterIsNotNull($this$toSet, "$this$toSet");
      return SetsKt.optimizeReadOnlySet((Set)SequencesKt.toCollection($this$toSet, (Collection)(new LinkedHashSet())));
   }

   @NotNull
   public static final <T, R> Sequence<R> flatMap(@NotNull Sequence<? extends T> $this$flatMap, @NotNull Function1<? super T, ? extends Sequence<? extends R>> transform) {
      Intrinsics.checkParameterIsNotNull($this$flatMap, "$this$flatMap");
      Intrinsics.checkParameterIsNotNull(transform, "transform");
      return (Sequence)(new FlatteningSequence($this$flatMap, transform, (Function1)null.INSTANCE));
   }

   @NotNull
   public static final <T, R, C extends Collection<? super R>> C flatMapTo(@NotNull Sequence<? extends T> $this$flatMapTo, @NotNull C destination, @NotNull Function1<? super T, ? extends Sequence<? extends R>> transform) {
      int $i$f$flatMapTo = 0;
      Intrinsics.checkParameterIsNotNull($this$flatMapTo, "$this$flatMapTo");
      Intrinsics.checkParameterIsNotNull(destination, "destination");
      Intrinsics.checkParameterIsNotNull(transform, "transform");
      Iterator var5 = $this$flatMapTo.iterator();

      while(var5.hasNext()) {
         Object element = var5.next();
         Sequence list = (Sequence)transform.invoke(element);
         CollectionsKt.addAll(destination, list);
      }

      return destination;
   }

   @NotNull
   public static final <T, K> Map<K, List<T>> groupBy(@NotNull Sequence<? extends T> $this$groupBy, @NotNull Function1<? super T, ? extends K> keySelector) {
      int $i$f$groupBy = 0;
      Intrinsics.checkParameterIsNotNull($this$groupBy, "$this$groupBy");
      Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");
      Map destination$iv = (Map)(new LinkedHashMap());
      int $i$f$groupByTo = false;
      Iterator var6 = $this$groupBy.iterator();

      while(var6.hasNext()) {
         Object element$iv = var6.next();
         Object key$iv = keySelector.invoke(element$iv);
         int $i$f$getOrPut = false;
         Object value$iv$iv = destination$iv.get(key$iv);
         Object var10000;
         if (value$iv$iv == null) {
            int var12 = false;
            Object answer$iv$iv = new ArrayList();
            destination$iv.put(key$iv, answer$iv$iv);
            var10000 = answer$iv$iv;
         } else {
            var10000 = value$iv$iv;
         }

         List list$iv = (List)var10000;
         list$iv.add(element$iv);
      }

      return destination$iv;
   }

   @NotNull
   public static final <T, K, V> Map<K, List<V>> groupBy(@NotNull Sequence<? extends T> $this$groupBy, @NotNull Function1<? super T, ? extends K> keySelector, @NotNull Function1<? super T, ? extends V> valueTransform) {
      int $i$f$groupBy = 0;
      Intrinsics.checkParameterIsNotNull($this$groupBy, "$this$groupBy");
      Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");
      Intrinsics.checkParameterIsNotNull(valueTransform, "valueTransform");
      Map destination$iv = (Map)(new LinkedHashMap());
      int $i$f$groupByTo = false;
      Iterator var7 = $this$groupBy.iterator();

      while(var7.hasNext()) {
         Object element$iv = var7.next();
         Object key$iv = keySelector.invoke(element$iv);
         int $i$f$getOrPut = false;
         Object value$iv$iv = destination$iv.get(key$iv);
         Object var10000;
         if (value$iv$iv == null) {
            int var13 = false;
            Object answer$iv$iv = new ArrayList();
            destination$iv.put(key$iv, answer$iv$iv);
            var10000 = answer$iv$iv;
         } else {
            var10000 = value$iv$iv;
         }

         List list$iv = (List)var10000;
         list$iv.add(valueTransform.invoke(element$iv));
      }

      return destination$iv;
   }

   @NotNull
   public static final <T, K, M extends Map<? super K, List<T>>> M groupByTo(@NotNull Sequence<? extends T> $this$groupByTo, @NotNull M destination, @NotNull Function1<? super T, ? extends K> keySelector) {
      int $i$f$groupByTo = 0;
      Intrinsics.checkParameterIsNotNull($this$groupByTo, "$this$groupByTo");
      Intrinsics.checkParameterIsNotNull(destination, "destination");
      Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");
      Iterator var5 = $this$groupByTo.iterator();

      while(var5.hasNext()) {
         Object element = var5.next();
         Object key = keySelector.invoke(element);
         int $i$f$getOrPut = false;
         Object value$iv = destination.get(key);
         Object var10000;
         if (value$iv == null) {
            int var11 = false;
            Object answer$iv = new ArrayList();
            destination.put(key, answer$iv);
            var10000 = answer$iv;
         } else {
            var10000 = value$iv;
         }

         List list = (List)var10000;
         list.add(element);
      }

      return destination;
   }

   @NotNull
   public static final <T, K, V, M extends Map<? super K, List<V>>> M groupByTo(@NotNull Sequence<? extends T> $this$groupByTo, @NotNull M destination, @NotNull Function1<? super T, ? extends K> keySelector, @NotNull Function1<? super T, ? extends V> valueTransform) {
      int $i$f$groupByTo = 0;
      Intrinsics.checkParameterIsNotNull($this$groupByTo, "$this$groupByTo");
      Intrinsics.checkParameterIsNotNull(destination, "destination");
      Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");
      Intrinsics.checkParameterIsNotNull(valueTransform, "valueTransform");
      Iterator var6 = $this$groupByTo.iterator();

      while(var6.hasNext()) {
         Object element = var6.next();
         Object key = keySelector.invoke(element);
         int $i$f$getOrPut = false;
         Object value$iv = destination.get(key);
         Object var10000;
         if (value$iv == null) {
            int var12 = false;
            Object answer$iv = new ArrayList();
            destination.put(key, answer$iv);
            var10000 = answer$iv;
         } else {
            var10000 = value$iv;
         }

         List list = (List)var10000;
         list.add(valueTransform.invoke(element));
      }

      return destination;
   }

   @SinceKotlin(
      version = "1.1"
   )
   @NotNull
   public static final <T, K> Grouping<T, K> groupingBy(@NotNull final Sequence<? extends T> $this$groupingBy, @NotNull final Function1<? super T, ? extends K> keySelector) {
      int $i$f$groupingBy = 0;
      Intrinsics.checkParameterIsNotNull($this$groupingBy, "$this$groupingBy");
      Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");
      return (Grouping)(new Grouping<T, K>() {
         @NotNull
         public Iterator<T> sourceIterator() {
            return $this$groupingBy.iterator();
         }

         public K keyOf(T element) {
            return keySelector.invoke(element);
         }
      });
   }

   @NotNull
   public static final <T, R> Sequence<R> map(@NotNull Sequence<? extends T> $this$map, @NotNull Function1<? super T, ? extends R> transform) {
      Intrinsics.checkParameterIsNotNull($this$map, "$this$map");
      Intrinsics.checkParameterIsNotNull(transform, "transform");
      return (Sequence)(new TransformingSequence($this$map, transform));
   }

   @NotNull
   public static final <T, R> Sequence<R> mapIndexed(@NotNull Sequence<? extends T> $this$mapIndexed, @NotNull Function2<? super Integer, ? super T, ? extends R> transform) {
      Intrinsics.checkParameterIsNotNull($this$mapIndexed, "$this$mapIndexed");
      Intrinsics.checkParameterIsNotNull(transform, "transform");
      return (Sequence)(new TransformingIndexedSequence($this$mapIndexed, transform));
   }

   @NotNull
   public static final <T, R> Sequence<R> mapIndexedNotNull(@NotNull Sequence<? extends T> $this$mapIndexedNotNull, @NotNull Function2<? super Integer, ? super T, ? extends R> transform) {
      Intrinsics.checkParameterIsNotNull($this$mapIndexedNotNull, "$this$mapIndexedNotNull");
      Intrinsics.checkParameterIsNotNull(transform, "transform");
      return SequencesKt.filterNotNull((Sequence)(new TransformingIndexedSequence($this$mapIndexedNotNull, transform)));
   }

   @NotNull
   public static final <T, R, C extends Collection<? super R>> C mapIndexedNotNullTo(@NotNull Sequence<? extends T> $this$mapIndexedNotNullTo, @NotNull C destination, @NotNull Function2<? super Integer, ? super T, ? extends R> transform) {
      int $i$f$mapIndexedNotNullTo = 0;
      Intrinsics.checkParameterIsNotNull($this$mapIndexedNotNullTo, "$this$mapIndexedNotNullTo");
      Intrinsics.checkParameterIsNotNull(destination, "destination");
      Intrinsics.checkParameterIsNotNull(transform, "transform");
      int $i$f$forEachIndexed = false;
      int index$iv = 0;
      Iterator var7 = $this$mapIndexedNotNullTo.iterator();

      while(var7.hasNext()) {
         Object item$iv = var7.next();
         int var9 = index$iv++;
         boolean var10 = false;
         if (var9 < 0) {
            if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
               throw (Throwable)(new ArithmeticException("Index overflow has happened."));
            }

            CollectionsKt.throwIndexOverflow();
         }

         int var14 = false;
         Object var20 = transform.invoke(var9, item$iv);
         if (var20 != null) {
            Object var15 = var20;
            boolean var16 = false;
            boolean var17 = false;
            int var19 = false;
            destination.add(var15);
         }
      }

      return destination;
   }

   @NotNull
   public static final <T, R, C extends Collection<? super R>> C mapIndexedTo(@NotNull Sequence<? extends T> $this$mapIndexedTo, @NotNull C destination, @NotNull Function2<? super Integer, ? super T, ? extends R> transform) {
      int $i$f$mapIndexedTo = 0;
      Intrinsics.checkParameterIsNotNull($this$mapIndexedTo, "$this$mapIndexedTo");
      Intrinsics.checkParameterIsNotNull(destination, "destination");
      Intrinsics.checkParameterIsNotNull(transform, "transform");
      int index = 0;

      Object item;
      int var7;
      for(Iterator var6 = $this$mapIndexedTo.iterator(); var6.hasNext(); destination.add(transform.invoke(var7, item))) {
         item = var6.next();
         var7 = index++;
         boolean var8 = false;
         if (var7 < 0) {
            if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
               throw (Throwable)(new ArithmeticException("Index overflow has happened."));
            }

            CollectionsKt.throwIndexOverflow();
         }
      }

      return destination;
   }

   @NotNull
   public static final <T, R> Sequence<R> mapNotNull(@NotNull Sequence<? extends T> $this$mapNotNull, @NotNull Function1<? super T, ? extends R> transform) {
      Intrinsics.checkParameterIsNotNull($this$mapNotNull, "$this$mapNotNull");
      Intrinsics.checkParameterIsNotNull(transform, "transform");
      return SequencesKt.filterNotNull((Sequence)(new TransformingSequence($this$mapNotNull, transform)));
   }

   @NotNull
   public static final <T, R, C extends Collection<? super R>> C mapNotNullTo(@NotNull Sequence<? extends T> $this$mapNotNullTo, @NotNull C destination, @NotNull Function1<? super T, ? extends R> transform) {
      int $i$f$mapNotNullTo = 0;
      Intrinsics.checkParameterIsNotNull($this$mapNotNullTo, "$this$mapNotNullTo");
      Intrinsics.checkParameterIsNotNull(destination, "destination");
      Intrinsics.checkParameterIsNotNull(transform, "transform");
      int $i$f$forEach = false;
      Iterator var6 = $this$mapNotNullTo.iterator();

      while(var6.hasNext()) {
         Object element$iv = var6.next();
         int var9 = false;
         Object var10000 = transform.invoke(element$iv);
         if (var10000 != null) {
            Object var10 = var10000;
            boolean var11 = false;
            boolean var12 = false;
            int var14 = false;
            destination.add(var10);
         }
      }

      return destination;
   }

   @NotNull
   public static final <T, R, C extends Collection<? super R>> C mapTo(@NotNull Sequence<? extends T> $this$mapTo, @NotNull C destination, @NotNull Function1<? super T, ? extends R> transform) {
      int $i$f$mapTo = 0;
      Intrinsics.checkParameterIsNotNull($this$mapTo, "$this$mapTo");
      Intrinsics.checkParameterIsNotNull(destination, "destination");
      Intrinsics.checkParameterIsNotNull(transform, "transform");
      Iterator var5 = $this$mapTo.iterator();

      while(var5.hasNext()) {
         Object item = var5.next();
         destination.add(transform.invoke(item));
      }

      return destination;
   }

   @NotNull
   public static final <T> Sequence<IndexedValue<T>> withIndex(@NotNull Sequence<? extends T> $this$withIndex) {
      Intrinsics.checkParameterIsNotNull($this$withIndex, "$this$withIndex");
      return (Sequence)(new IndexingSequence($this$withIndex));
   }

   @NotNull
   public static final <T> Sequence<T> distinct(@NotNull Sequence<? extends T> $this$distinct) {
      Intrinsics.checkParameterIsNotNull($this$distinct, "$this$distinct");
      return SequencesKt.distinctBy($this$distinct, (Function1)null.INSTANCE);
   }

   @NotNull
   public static final <T, K> Sequence<T> distinctBy(@NotNull Sequence<? extends T> $this$distinctBy, @NotNull Function1<? super T, ? extends K> selector) {
      Intrinsics.checkParameterIsNotNull($this$distinctBy, "$this$distinctBy");
      Intrinsics.checkParameterIsNotNull(selector, "selector");
      return (Sequence)(new DistinctSequence($this$distinctBy, selector));
   }

   @NotNull
   public static final <T> Set<T> toMutableSet(@NotNull Sequence<? extends T> $this$toMutableSet) {
      Intrinsics.checkParameterIsNotNull($this$toMutableSet, "$this$toMutableSet");
      LinkedHashSet set = new LinkedHashSet();
      Iterator var3 = $this$toMutableSet.iterator();

      while(var3.hasNext()) {
         Object item = var3.next();
         set.add(item);
      }

      return (Set)set;
   }

   public static final <T> boolean all(@NotNull Sequence<? extends T> $this$all, @NotNull Function1<? super T, Boolean> predicate) {
      int $i$f$all = 0;
      Intrinsics.checkParameterIsNotNull($this$all, "$this$all");
      Intrinsics.checkParameterIsNotNull(predicate, "predicate");
      Iterator var4 = $this$all.iterator();

      Object element;
      do {
         if (!var4.hasNext()) {
            return true;
         }

         element = var4.next();
      } while((Boolean)predicate.invoke(element));

      return false;
   }

   public static final <T> boolean any(@NotNull Sequence<? extends T> $this$any) {
      Intrinsics.checkParameterIsNotNull($this$any, "$this$any");
      return $this$any.iterator().hasNext();
   }

   public static final <T> boolean any(@NotNull Sequence<? extends T> $this$any, @NotNull Function1<? super T, Boolean> predicate) {
      int $i$f$any = 0;
      Intrinsics.checkParameterIsNotNull($this$any, "$this$any");
      Intrinsics.checkParameterIsNotNull(predicate, "predicate");
      Iterator var4 = $this$any.iterator();

      Object element;
      do {
         if (!var4.hasNext()) {
            return false;
         }

         element = var4.next();
      } while(!(Boolean)predicate.invoke(element));

      return true;
   }

   public static final <T> int count(@NotNull Sequence<? extends T> $this$count) {
      Intrinsics.checkParameterIsNotNull($this$count, "$this$count");
      int count = 0;
      Iterator var3 = $this$count.iterator();

      while(var3.hasNext()) {
         Object element = var3.next();
         ++count;
         boolean var5 = false;
         if (count < 0) {
            CollectionsKt.throwCountOverflow();
         }
      }

      return count;
   }

   public static final <T> int count(@NotNull Sequence<? extends T> $this$count, @NotNull Function1<? super T, Boolean> predicate) {
      int $i$f$count = 0;
      Intrinsics.checkParameterIsNotNull($this$count, "$this$count");
      Intrinsics.checkParameterIsNotNull(predicate, "predicate");
      int count = 0;
      Iterator var5 = $this$count.iterator();

      while(var5.hasNext()) {
         Object element = var5.next();
         if ((Boolean)predicate.invoke(element)) {
            ++count;
            boolean var7 = false;
            if (count < 0) {
               if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                  throw (Throwable)(new ArithmeticException("Count overflow has happened."));
               }

               CollectionsKt.throwCountOverflow();
            }
         }
      }

      return count;
   }

   public static final <T, R> R fold(@NotNull Sequence<? extends T> $this$fold, R initial, @NotNull Function2<? super R, ? super T, ? extends R> operation) {
      int $i$f$fold = 0;
      Intrinsics.checkParameterIsNotNull($this$fold, "$this$fold");
      Intrinsics.checkParameterIsNotNull(operation, "operation");
      Object accumulator = initial;

      Object element;
      for(Iterator var6 = $this$fold.iterator(); var6.hasNext(); accumulator = operation.invoke(accumulator, element)) {
         element = var6.next();
      }

      return accumulator;
   }

   public static final <T, R> R foldIndexed(@NotNull Sequence<? extends T> $this$foldIndexed, R initial, @NotNull Function3<? super Integer, ? super R, ? super T, ? extends R> operation) {
      int $i$f$foldIndexed = 0;
      Intrinsics.checkParameterIsNotNull($this$foldIndexed, "$this$foldIndexed");
      Intrinsics.checkParameterIsNotNull(operation, "operation");
      int index = 0;
      Object accumulator = initial;

      Object element;
      int var8;
      for(Iterator var7 = $this$foldIndexed.iterator(); var7.hasNext(); accumulator = operation.invoke(var8, accumulator, element)) {
         element = var7.next();
         var8 = index++;
         boolean var9 = false;
         if (var8 < 0) {
            if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
               throw (Throwable)(new ArithmeticException("Index overflow has happened."));
            }

            CollectionsKt.throwIndexOverflow();
         }
      }

      return accumulator;
   }

   public static final <T> void forEach(@NotNull Sequence<? extends T> $this$forEach, @NotNull Function1<? super T, Unit> action) {
      int $i$f$forEach = 0;
      Intrinsics.checkParameterIsNotNull($this$forEach, "$this$forEach");
      Intrinsics.checkParameterIsNotNull(action, "action");
      Iterator var4 = $this$forEach.iterator();

      while(var4.hasNext()) {
         Object element = var4.next();
         action.invoke(element);
      }

   }

   public static final <T> void forEachIndexed(@NotNull Sequence<? extends T> $this$forEachIndexed, @NotNull Function2<? super Integer, ? super T, Unit> action) {
      int $i$f$forEachIndexed = 0;
      Intrinsics.checkParameterIsNotNull($this$forEachIndexed, "$this$forEachIndexed");
      Intrinsics.checkParameterIsNotNull(action, "action");
      int index = 0;

      Object item;
      int var6;
      for(Iterator var5 = $this$forEachIndexed.iterator(); var5.hasNext(); action.invoke(var6, item)) {
         item = var5.next();
         var6 = index++;
         boolean var7 = false;
         if (var6 < 0) {
            if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
               throw (Throwable)(new ArithmeticException("Index overflow has happened."));
            }

            CollectionsKt.throwIndexOverflow();
         }
      }

   }

   @SinceKotlin(
      version = "1.1"
   )
   @Nullable
   public static final Double max(@NotNull Sequence<Double> $this$max) {
      Intrinsics.checkParameterIsNotNull($this$max, "$this$max");
      Iterator iterator = $this$max.iterator();
      if (!iterator.hasNext()) {
         return null;
      } else {
         double max = ((Number)iterator.next()).doubleValue();
         boolean var6 = false;
         if (Double.isNaN(max)) {
            return max;
         } else {
            while(iterator.hasNext()) {
               double e = ((Number)iterator.next()).doubleValue();
               boolean var8 = false;
               if (Double.isNaN(e)) {
                  return e;
               }

               if (max < e) {
                  max = e;
               }
            }

            return max;
         }
      }
   }

   @SinceKotlin(
      version = "1.1"
   )
   @Nullable
   public static final Float max(@NotNull Sequence<Float> $this$max) {
      Intrinsics.checkParameterIsNotNull($this$max, "$this$max");
      Iterator iterator = $this$max.iterator();
      if (!iterator.hasNext()) {
         return null;
      } else {
         float max = ((Number)iterator.next()).floatValue();
         boolean var4 = false;
         if (Float.isNaN(max)) {
            return max;
         } else {
            while(iterator.hasNext()) {
               float e = ((Number)iterator.next()).floatValue();
               boolean var5 = false;
               if (Float.isNaN(e)) {
                  return e;
               }

               if (max < e) {
                  max = e;
               }
            }

            return max;
         }
      }
   }

   @Nullable
   public static final <T extends Comparable<? super T>> T max(@NotNull Sequence<? extends T> $this$max) {
      Intrinsics.checkParameterIsNotNull($this$max, "$this$max");
      Iterator iterator = $this$max.iterator();
      if (!iterator.hasNext()) {
         return null;
      } else {
         Comparable max = (Comparable)iterator.next();

         while(iterator.hasNext()) {
            Comparable e = (Comparable)iterator.next();
            if (max.compareTo(e) < 0) {
               max = e;
            }
         }

         return max;
      }
   }

   @Nullable
   public static final <T, R extends Comparable<? super R>> T maxBy(@NotNull Sequence<? extends T> $this$maxBy, @NotNull Function1<? super T, ? extends R> selector) {
      int $i$f$maxBy = 0;
      Intrinsics.checkParameterIsNotNull($this$maxBy, "$this$maxBy");
      Intrinsics.checkParameterIsNotNull(selector, "selector");
      Iterator iterator = $this$maxBy.iterator();
      if (!iterator.hasNext()) {
         return null;
      } else {
         Object maxElem = iterator.next();
         if (!iterator.hasNext()) {
            return maxElem;
         } else {
            Comparable maxValue = (Comparable)selector.invoke(maxElem);

            do {
               Object e = iterator.next();
               Comparable v = (Comparable)selector.invoke(e);
               if (maxValue.compareTo(v) < 0) {
                  maxElem = e;
                  maxValue = v;
               }
            } while(iterator.hasNext());

            return maxElem;
         }
      }
   }

   @Nullable
   public static final <T> T maxWith(@NotNull Sequence<? extends T> $this$maxWith, @NotNull Comparator<? super T> comparator) {
      Intrinsics.checkParameterIsNotNull($this$maxWith, "$this$maxWith");
      Intrinsics.checkParameterIsNotNull(comparator, "comparator");
      Iterator iterator = $this$maxWith.iterator();
      if (!iterator.hasNext()) {
         return null;
      } else {
         Object max = iterator.next();

         while(iterator.hasNext()) {
            Object e = iterator.next();
            if (comparator.compare(max, e) < 0) {
               max = e;
            }
         }

         return max;
      }
   }

   @SinceKotlin(
      version = "1.1"
   )
   @Nullable
   public static final Double min(@NotNull Sequence<Double> $this$min) {
      Intrinsics.checkParameterIsNotNull($this$min, "$this$min");
      Iterator iterator = $this$min.iterator();
      if (!iterator.hasNext()) {
         return null;
      } else {
         double min = ((Number)iterator.next()).doubleValue();
         boolean var6 = false;
         if (Double.isNaN(min)) {
            return min;
         } else {
            while(iterator.hasNext()) {
               double e = ((Number)iterator.next()).doubleValue();
               boolean var8 = false;
               if (Double.isNaN(e)) {
                  return e;
               }

               if (min > e) {
                  min = e;
               }
            }

            return min;
         }
      }
   }

   @SinceKotlin(
      version = "1.1"
   )
   @Nullable
   public static final Float min(@NotNull Sequence<Float> $this$min) {
      Intrinsics.checkParameterIsNotNull($this$min, "$this$min");
      Iterator iterator = $this$min.iterator();
      if (!iterator.hasNext()) {
         return null;
      } else {
         float min = ((Number)iterator.next()).floatValue();
         boolean var4 = false;
         if (Float.isNaN(min)) {
            return min;
         } else {
            while(iterator.hasNext()) {
               float e = ((Number)iterator.next()).floatValue();
               boolean var5 = false;
               if (Float.isNaN(e)) {
                  return e;
               }

               if (min > e) {
                  min = e;
               }
            }

            return min;
         }
      }
   }

   @Nullable
   public static final <T extends Comparable<? super T>> T min(@NotNull Sequence<? extends T> $this$min) {
      Intrinsics.checkParameterIsNotNull($this$min, "$this$min");
      Iterator iterator = $this$min.iterator();
      if (!iterator.hasNext()) {
         return null;
      } else {
         Comparable min = (Comparable)iterator.next();

         while(iterator.hasNext()) {
            Comparable e = (Comparable)iterator.next();
            if (min.compareTo(e) > 0) {
               min = e;
            }
         }

         return min;
      }
   }

   @Nullable
   public static final <T, R extends Comparable<? super R>> T minBy(@NotNull Sequence<? extends T> $this$minBy, @NotNull Function1<? super T, ? extends R> selector) {
      int $i$f$minBy = 0;
      Intrinsics.checkParameterIsNotNull($this$minBy, "$this$minBy");
      Intrinsics.checkParameterIsNotNull(selector, "selector");
      Iterator iterator = $this$minBy.iterator();
      if (!iterator.hasNext()) {
         return null;
      } else {
         Object minElem = iterator.next();
         if (!iterator.hasNext()) {
            return minElem;
         } else {
            Comparable minValue = (Comparable)selector.invoke(minElem);

            do {
               Object e = iterator.next();
               Comparable v = (Comparable)selector.invoke(e);
               if (minValue.compareTo(v) > 0) {
                  minElem = e;
                  minValue = v;
               }
            } while(iterator.hasNext());

            return minElem;
         }
      }
   }

   @Nullable
   public static final <T> T minWith(@NotNull Sequence<? extends T> $this$minWith, @NotNull Comparator<? super T> comparator) {
      Intrinsics.checkParameterIsNotNull($this$minWith, "$this$minWith");
      Intrinsics.checkParameterIsNotNull(comparator, "comparator");
      Iterator iterator = $this$minWith.iterator();
      if (!iterator.hasNext()) {
         return null;
      } else {
         Object min = iterator.next();

         while(iterator.hasNext()) {
            Object e = iterator.next();
            if (comparator.compare(min, e) > 0) {
               min = e;
            }
         }

         return min;
      }
   }

   public static final <T> boolean none(@NotNull Sequence<? extends T> $this$none) {
      Intrinsics.checkParameterIsNotNull($this$none, "$this$none");
      return !$this$none.iterator().hasNext();
   }

   public static final <T> boolean none(@NotNull Sequence<? extends T> $this$none, @NotNull Function1<? super T, Boolean> predicate) {
      int $i$f$none = 0;
      Intrinsics.checkParameterIsNotNull($this$none, "$this$none");
      Intrinsics.checkParameterIsNotNull(predicate, "predicate");
      Iterator var4 = $this$none.iterator();

      Object element;
      do {
         if (!var4.hasNext()) {
            return true;
         }

         element = var4.next();
      } while(!(Boolean)predicate.invoke(element));

      return false;
   }

   @SinceKotlin(
      version = "1.1"
   )
   @NotNull
   public static final <T> Sequence<T> onEach(@NotNull Sequence<? extends T> $this$onEach, @NotNull final Function1<? super T, Unit> action) {
      Intrinsics.checkParameterIsNotNull($this$onEach, "$this$onEach");
      Intrinsics.checkParameterIsNotNull(action, "action");
      return SequencesKt.map($this$onEach, (Function1)(new Function1<T, T>() {
         public final T invoke(T it) {
            action.invoke(it);
            return it;
         }
      }));
   }

   public static final <S, T extends S> S reduce(@NotNull Sequence<? extends T> $this$reduce, @NotNull Function2<? super S, ? super T, ? extends S> operation) {
      int $i$f$reduce = 0;
      Intrinsics.checkParameterIsNotNull($this$reduce, "$this$reduce");
      Intrinsics.checkParameterIsNotNull(operation, "operation");
      Iterator iterator = $this$reduce.iterator();
      if (!iterator.hasNext()) {
         throw (Throwable)(new UnsupportedOperationException("Empty sequence can't be reduced."));
      } else {
         Object accumulator;
         for(accumulator = iterator.next(); iterator.hasNext(); accumulator = operation.invoke(accumulator, iterator.next())) {
         }

         return accumulator;
      }
   }

   public static final <S, T extends S> S reduceIndexed(@NotNull Sequence<? extends T> $this$reduceIndexed, @NotNull Function3<? super Integer, ? super S, ? super T, ? extends S> operation) {
      int $i$f$reduceIndexed = 0;
      Intrinsics.checkParameterIsNotNull($this$reduceIndexed, "$this$reduceIndexed");
      Intrinsics.checkParameterIsNotNull(operation, "operation");
      Iterator iterator = $this$reduceIndexed.iterator();
      if (!iterator.hasNext()) {
         throw (Throwable)(new UnsupportedOperationException("Empty sequence can't be reduced."));
      } else {
         int index = 1;

         Object accumulator;
         int var6;
         for(accumulator = iterator.next(); iterator.hasNext(); accumulator = operation.invoke(var6, accumulator, iterator.next())) {
            var6 = index++;
            boolean var7 = false;
            if (var6 < 0) {
               if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                  throw (Throwable)(new ArithmeticException("Index overflow has happened."));
               }

               CollectionsKt.throwIndexOverflow();
            }
         }

         return accumulator;
      }
   }

   public static final <T> int sumBy(@NotNull Sequence<? extends T> $this$sumBy, @NotNull Function1<? super T, Integer> selector) {
      int $i$f$sumBy = 0;
      Intrinsics.checkParameterIsNotNull($this$sumBy, "$this$sumBy");
      Intrinsics.checkParameterIsNotNull(selector, "selector");
      int sum = 0;

      Object element;
      for(Iterator var5 = $this$sumBy.iterator(); var5.hasNext(); sum += ((Number)selector.invoke(element)).intValue()) {
         element = var5.next();
      }

      return sum;
   }

   public static final <T> double sumByDouble(@NotNull Sequence<? extends T> $this$sumByDouble, @NotNull Function1<? super T, Double> selector) {
      int $i$f$sumByDouble = 0;
      Intrinsics.checkParameterIsNotNull($this$sumByDouble, "$this$sumByDouble");
      Intrinsics.checkParameterIsNotNull(selector, "selector");
      double sum = 0.0D;

      Object element;
      for(Iterator var6 = $this$sumByDouble.iterator(); var6.hasNext(); sum += ((Number)selector.invoke(element)).doubleValue()) {
         element = var6.next();
      }

      return sum;
   }

   @NotNull
   public static final <T> Sequence<T> requireNoNulls(@NotNull final Sequence<? extends T> $this$requireNoNulls) {
      Intrinsics.checkParameterIsNotNull($this$requireNoNulls, "$this$requireNoNulls");
      return SequencesKt.map($this$requireNoNulls, (Function1)(new Function1<T, T>() {
         @NotNull
         public final T invoke(@Nullable T it) {
            if (it != null) {
               return it;
            } else {
               throw (Throwable)(new IllegalArgumentException("null element found in " + $this$requireNoNulls + '.'));
            }
         }
      }));
   }

   @SinceKotlin(
      version = "1.2"
   )
   @NotNull
   public static final <T> Sequence<List<T>> chunked(@NotNull Sequence<? extends T> $this$chunked, int size) {
      Intrinsics.checkParameterIsNotNull($this$chunked, "$this$chunked");
      return SequencesKt.windowed($this$chunked, size, size, true);
   }

   @SinceKotlin(
      version = "1.2"
   )
   @NotNull
   public static final <T, R> Sequence<R> chunked(@NotNull Sequence<? extends T> $this$chunked, int size, @NotNull Function1<? super List<? extends T>, ? extends R> transform) {
      Intrinsics.checkParameterIsNotNull($this$chunked, "$this$chunked");
      Intrinsics.checkParameterIsNotNull(transform, "transform");
      return SequencesKt.windowed($this$chunked, size, size, true, transform);
   }

   @NotNull
   public static final <T> Sequence<T> minus(@NotNull final Sequence<? extends T> $this$minus, final T element) {
      Intrinsics.checkParameterIsNotNull($this$minus, "$this$minus");
      return (Sequence)(new Sequence<T>() {
         @NotNull
         public Iterator<T> iterator() {
            final Ref.BooleanRef removed = new Ref.BooleanRef();
            removed.element = false;
            return SequencesKt.filter($this$minus, (Function1)(new Function1<T, Boolean>() {
               public final boolean invoke(T it) {
                  boolean var10000;
                  if (!removed.element && Intrinsics.areEqual(it, element)) {
                     removed.element = true;
                     var10000 = false;
                  } else {
                     var10000 = true;
                  }

                  return var10000;
               }
            })).iterator();
         }
      });
   }

   @NotNull
   public static final <T> Sequence<T> minus(@NotNull final Sequence<? extends T> $this$minus, @NotNull final T[] elements) {
      Intrinsics.checkParameterIsNotNull($this$minus, "$this$minus");
      Intrinsics.checkParameterIsNotNull(elements, "elements");
      boolean var3 = false;
      return elements.length == 0 ? $this$minus : (Sequence)(new Sequence<T>() {
         @NotNull
         public Iterator<T> iterator() {
            final HashSet other = ArraysKt.toHashSet(elements);
            return SequencesKt.filterNot($this$minus, (Function1)(new Function1<T, Boolean>() {
               public final boolean invoke(T it) {
                  return other.contains(it);
               }
            })).iterator();
         }
      });
   }

   @NotNull
   public static final <T> Sequence<T> minus(@NotNull final Sequence<? extends T> $this$minus, @NotNull final Iterable<? extends T> elements) {
      Intrinsics.checkParameterIsNotNull($this$minus, "$this$minus");
      Intrinsics.checkParameterIsNotNull(elements, "elements");
      return (Sequence)(new Sequence<T>() {
         @NotNull
         public Iterator<T> iterator() {
            final Collection other = CollectionsKt.convertToSetForSetOperation(elements);
            return other.isEmpty() ? $this$minus.iterator() : SequencesKt.filterNot($this$minus, (Function1)(new Function1<T, Boolean>() {
               public final boolean invoke(T it) {
                  return other.contains(it);
               }
            })).iterator();
         }
      });
   }

   @NotNull
   public static final <T> Sequence<T> minus(@NotNull final Sequence<? extends T> $this$minus, @NotNull final Sequence<? extends T> elements) {
      Intrinsics.checkParameterIsNotNull($this$minus, "$this$minus");
      Intrinsics.checkParameterIsNotNull(elements, "elements");
      return (Sequence)(new Sequence<T>() {
         @NotNull
         public Iterator<T> iterator() {
            final HashSet other = SequencesKt.toHashSet(elements);
            return other.isEmpty() ? $this$minus.iterator() : SequencesKt.filterNot($this$minus, (Function1)(new Function1<T, Boolean>() {
               public final boolean invoke(T it) {
                  return other.contains(it);
               }
            })).iterator();
         }
      });
   }

   @InlineOnly
   private static final <T> Sequence<T> minusElement(@NotNull Sequence<? extends T> $this$minusElement, T element) {
      int $i$f$minusElement = 0;
      return SequencesKt.minus($this$minusElement, element);
   }

   @NotNull
   public static final <T> Pair<List<T>, List<T>> partition(@NotNull Sequence<? extends T> $this$partition, @NotNull Function1<? super T, Boolean> predicate) {
      int $i$f$partition = 0;
      Intrinsics.checkParameterIsNotNull($this$partition, "$this$partition");
      Intrinsics.checkParameterIsNotNull(predicate, "predicate");
      ArrayList first = new ArrayList();
      ArrayList second = new ArrayList();
      Iterator var6 = $this$partition.iterator();

      while(var6.hasNext()) {
         Object element = var6.next();
         if ((Boolean)predicate.invoke(element)) {
            first.add(element);
         } else {
            second.add(element);
         }
      }

      return new Pair(first, second);
   }

   @NotNull
   public static final <T> Sequence<T> plus(@NotNull Sequence<? extends T> $this$plus, T element) {
      Intrinsics.checkParameterIsNotNull($this$plus, "$this$plus");
      return SequencesKt.flatten(SequencesKt.sequenceOf(new Sequence[]{$this$plus, SequencesKt.sequenceOf(new Object[]{element})}));
   }

   @NotNull
   public static final <T> Sequence<T> plus(@NotNull Sequence<? extends T> $this$plus, @NotNull T[] elements) {
      Intrinsics.checkParameterIsNotNull($this$plus, "$this$plus");
      Intrinsics.checkParameterIsNotNull(elements, "elements");
      return SequencesKt.plus($this$plus, (Iterable)ArraysKt.asList(elements));
   }

   @NotNull
   public static final <T> Sequence<T> plus(@NotNull Sequence<? extends T> $this$plus, @NotNull Iterable<? extends T> elements) {
      Intrinsics.checkParameterIsNotNull($this$plus, "$this$plus");
      Intrinsics.checkParameterIsNotNull(elements, "elements");
      return SequencesKt.flatten(SequencesKt.sequenceOf(new Sequence[]{$this$plus, CollectionsKt.asSequence(elements)}));
   }

   @NotNull
   public static final <T> Sequence<T> plus(@NotNull Sequence<? extends T> $this$plus, @NotNull Sequence<? extends T> elements) {
      Intrinsics.checkParameterIsNotNull($this$plus, "$this$plus");
      Intrinsics.checkParameterIsNotNull(elements, "elements");
      return SequencesKt.flatten(SequencesKt.sequenceOf(new Sequence[]{$this$plus, elements}));
   }

   @InlineOnly
   private static final <T> Sequence<T> plusElement(@NotNull Sequence<? extends T> $this$plusElement, T element) {
      int $i$f$plusElement = 0;
      return SequencesKt.plus($this$plusElement, element);
   }

   @SinceKotlin(
      version = "1.2"
   )
   @NotNull
   public static final <T> Sequence<List<T>> windowed(@NotNull Sequence<? extends T> $this$windowed, int size, int step, boolean partialWindows) {
      Intrinsics.checkParameterIsNotNull($this$windowed, "$this$windowed");
      return SlidingWindowKt.windowedSequence($this$windowed, size, step, partialWindows, false);
   }

   // $FF: synthetic method
   public static Sequence windowed$default(Sequence var0, int var1, int var2, boolean var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 1;
      }

      if ((var4 & 4) != 0) {
         var3 = false;
      }

      return SequencesKt.windowed(var0, var1, var2, var3);
   }

   @SinceKotlin(
      version = "1.2"
   )
   @NotNull
   public static final <T, R> Sequence<R> windowed(@NotNull Sequence<? extends T> $this$windowed, int size, int step, boolean partialWindows, @NotNull Function1<? super List<? extends T>, ? extends R> transform) {
      Intrinsics.checkParameterIsNotNull($this$windowed, "$this$windowed");
      Intrinsics.checkParameterIsNotNull(transform, "transform");
      return SequencesKt.map(SlidingWindowKt.windowedSequence($this$windowed, size, step, partialWindows, true), transform);
   }

   // $FF: synthetic method
   public static Sequence windowed$default(Sequence var0, int var1, int var2, boolean var3, Function1 var4, int var5, Object var6) {
      if ((var5 & 2) != 0) {
         var2 = 1;
      }

      if ((var5 & 4) != 0) {
         var3 = false;
      }

      return SequencesKt.windowed(var0, var1, var2, var3, var4);
   }

   @NotNull
   public static final <T, R> Sequence<Pair<T, R>> zip(@NotNull Sequence<? extends T> $this$zip, @NotNull Sequence<? extends R> other) {
      Intrinsics.checkParameterIsNotNull($this$zip, "$this$zip");
      Intrinsics.checkParameterIsNotNull(other, "other");
      return (Sequence)(new MergingSequence($this$zip, other, (Function2)null.INSTANCE));
   }

   @NotNull
   public static final <T, R, V> Sequence<V> zip(@NotNull Sequence<? extends T> $this$zip, @NotNull Sequence<? extends R> other, @NotNull Function2<? super T, ? super R, ? extends V> transform) {
      Intrinsics.checkParameterIsNotNull($this$zip, "$this$zip");
      Intrinsics.checkParameterIsNotNull(other, "other");
      Intrinsics.checkParameterIsNotNull(transform, "transform");
      return (Sequence)(new MergingSequence($this$zip, other, transform));
   }

   @SinceKotlin(
      version = "1.2"
   )
   @NotNull
   public static final <T> Sequence<Pair<T, T>> zipWithNext(@NotNull Sequence<? extends T> $this$zipWithNext) {
      Intrinsics.checkParameterIsNotNull($this$zipWithNext, "$this$zipWithNext");
      return SequencesKt.zipWithNext($this$zipWithNext, (Function2)null.INSTANCE);
   }

   @SinceKotlin(
      version = "1.2"
   )
   @NotNull
   public static final <T, R> Sequence<R> zipWithNext(@NotNull final Sequence<? extends T> $this$zipWithNext, @NotNull final Function2<? super T, ? super T, ? extends R> transform) {
      Intrinsics.checkParameterIsNotNull($this$zipWithNext, "$this$zipWithNext");
      Intrinsics.checkParameterIsNotNull(transform, "transform");
      return SequencesKt.sequence((Function2)(new Function2<SequenceScope<? super R>, Continuation<? super Unit>, Object>((Continuation)null) {
         private SequenceScope p$;
         Object L$0;
         Object L$1;
         Object L$2;
         Object L$3;
         int label;

         @Nullable
         public final Object invokeSuspend(@NotNull Object $result) {
            Object var6 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
            SequenceScope $this$result;
            Iterator iterator;
            Object current;
            Object next;
            switch(this.label) {
            case 0:
               ResultKt.throwOnFailure($result);
               $this$result = this.p$;
               iterator = $this$zipWithNext.iterator();
               if (!iterator.hasNext()) {
                  return Unit.INSTANCE;
               }

               current = iterator.next();
               break;
            case 1:
               next = this.L$3;
               current = this.L$2;
               iterator = (Iterator)this.L$1;
               $this$result = (SequenceScope)this.L$0;
               ResultKt.throwOnFailure($result);
               current = next;
               break;
            default:
               throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
            }

            while(iterator.hasNext()) {
               next = iterator.next();
               Object var10001 = transform.invoke(current, next);
               this.L$0 = $this$result;
               this.L$1 = iterator;
               this.L$2 = current;
               this.L$3 = next;
               this.label = 1;
               if ($this$result.yield(var10001, this) == var6) {
                  return var6;
               }

               current = next;
            }

            return Unit.INSTANCE;
         }

         @NotNull
         public final Continuation<Unit> create(@Nullable Object value, @NotNull Continuation<?> completion) {
            Intrinsics.checkParameterIsNotNull(completion, "completion");
            Function2 var3 = new <anonymous constructor>(completion);
            var3.p$ = (SequenceScope)value;
            return var3;
         }

         public final Object invoke(Object var1, Object var2) {
            return ((<undefinedtype>)this.create(var1, (Continuation)var2)).invokeSuspend(Unit.INSTANCE);
         }
      }));
   }

   @NotNull
   public static final <T, A extends Appendable> A joinTo(@NotNull Sequence<? extends T> $this$joinTo, @NotNull A buffer, @NotNull CharSequence separator, @NotNull CharSequence prefix, @NotNull CharSequence postfix, int limit, @NotNull CharSequence truncated, @Nullable Function1<? super T, ? extends CharSequence> transform) {
      Intrinsics.checkParameterIsNotNull($this$joinTo, "$this$joinTo");
      Intrinsics.checkParameterIsNotNull(buffer, "buffer");
      Intrinsics.checkParameterIsNotNull(separator, "separator");
      Intrinsics.checkParameterIsNotNull(prefix, "prefix");
      Intrinsics.checkParameterIsNotNull(postfix, "postfix");
      Intrinsics.checkParameterIsNotNull(truncated, "truncated");
      buffer.append(prefix);
      int count = 0;
      Iterator var10 = $this$joinTo.iterator();

      while(var10.hasNext()) {
         Object element = var10.next();
         ++count;
         if (count > 1) {
            buffer.append(separator);
         }

         if (limit >= 0 && count > limit) {
            break;
         }

         StringsKt.appendElement(buffer, element, transform);
      }

      if (limit >= 0 && count > limit) {
         buffer.append(truncated);
      }

      buffer.append(postfix);
      return buffer;
   }

   // $FF: synthetic method
   public static Appendable joinTo$default(Sequence var0, Appendable var1, CharSequence var2, CharSequence var3, CharSequence var4, int var5, CharSequence var6, Function1 var7, int var8, Object var9) {
      if ((var8 & 2) != 0) {
         var2 = (CharSequence)", ";
      }

      if ((var8 & 4) != 0) {
         var3 = (CharSequence)"";
      }

      if ((var8 & 8) != 0) {
         var4 = (CharSequence)"";
      }

      if ((var8 & 16) != 0) {
         var5 = -1;
      }

      if ((var8 & 32) != 0) {
         var6 = (CharSequence)"...";
      }

      if ((var8 & 64) != 0) {
         var7 = (Function1)null;
      }

      return SequencesKt.joinTo(var0, var1, var2, var3, var4, var5, var6, var7);
   }

   @NotNull
   public static final <T> String joinToString(@NotNull Sequence<? extends T> $this$joinToString, @NotNull CharSequence separator, @NotNull CharSequence prefix, @NotNull CharSequence postfix, int limit, @NotNull CharSequence truncated, @Nullable Function1<? super T, ? extends CharSequence> transform) {
      Intrinsics.checkParameterIsNotNull($this$joinToString, "$this$joinToString");
      Intrinsics.checkParameterIsNotNull(separator, "separator");
      Intrinsics.checkParameterIsNotNull(prefix, "prefix");
      Intrinsics.checkParameterIsNotNull(postfix, "postfix");
      Intrinsics.checkParameterIsNotNull(truncated, "truncated");
      String var10000 = ((StringBuilder)SequencesKt.joinTo($this$joinToString, (Appendable)(new StringBuilder()), separator, prefix, postfix, limit, truncated, transform)).toString();
      Intrinsics.checkExpressionValueIsNotNull(var10000, "joinTo(StringBuilder(), …ed, transform).toString()");
      return var10000;
   }

   // $FF: synthetic method
   public static String joinToString$default(Sequence var0, CharSequence var1, CharSequence var2, CharSequence var3, int var4, CharSequence var5, Function1 var6, int var7, Object var8) {
      if ((var7 & 1) != 0) {
         var1 = (CharSequence)", ";
      }

      if ((var7 & 2) != 0) {
         var2 = (CharSequence)"";
      }

      if ((var7 & 4) != 0) {
         var3 = (CharSequence)"";
      }

      if ((var7 & 8) != 0) {
         var4 = -1;
      }

      if ((var7 & 16) != 0) {
         var5 = (CharSequence)"...";
      }

      if ((var7 & 32) != 0) {
         var6 = (Function1)null;
      }

      return SequencesKt.joinToString(var0, var1, var2, var3, var4, var5, var6);
   }

   @NotNull
   public static final <T> Iterable<T> asIterable(@NotNull Sequence<? extends T> $this$asIterable) {
      Intrinsics.checkParameterIsNotNull($this$asIterable, "$this$asIterable");
      boolean var1 = false;
      return (Iterable)(new SequencesKt___SequencesKt$asIterable$$inlined$Iterable$1($this$asIterable));
   }

   @InlineOnly
   private static final <T> Sequence<T> asSequence(@NotNull Sequence<? extends T> $this$asSequence) {
      int $i$f$asSequence = 0;
      return $this$asSequence;
   }

   @JvmName(
      name = "averageOfByte"
   )
   public static final double averageOfByte(@NotNull Sequence<Byte> $this$average) {
      Intrinsics.checkParameterIsNotNull($this$average, "$this$average");
      double sum = 0.0D;
      int count = 0;
      Iterator var5 = $this$average.iterator();

      while(var5.hasNext()) {
         byte element = ((Number)var5.next()).byteValue();
         sum += (double)element;
         ++count;
         boolean var7 = false;
         if (count < 0) {
            CollectionsKt.throwCountOverflow();
         }
      }

      return count == 0 ? DoubleCompanionObject.INSTANCE.getNaN() : sum / (double)count;
   }

   @JvmName(
      name = "averageOfShort"
   )
   public static final double averageOfShort(@NotNull Sequence<Short> $this$average) {
      Intrinsics.checkParameterIsNotNull($this$average, "$this$average");
      double sum = 0.0D;
      int count = 0;
      Iterator var5 = $this$average.iterator();

      while(var5.hasNext()) {
         short element = ((Number)var5.next()).shortValue();
         sum += (double)element;
         ++count;
         boolean var7 = false;
         if (count < 0) {
            CollectionsKt.throwCountOverflow();
         }
      }

      return count == 0 ? DoubleCompanionObject.INSTANCE.getNaN() : sum / (double)count;
   }

   @JvmName(
      name = "averageOfInt"
   )
   public static final double averageOfInt(@NotNull Sequence<Integer> $this$average) {
      Intrinsics.checkParameterIsNotNull($this$average, "$this$average");
      double sum = 0.0D;
      int count = 0;
      Iterator var5 = $this$average.iterator();

      while(var5.hasNext()) {
         int element = ((Number)var5.next()).intValue();
         sum += (double)element;
         ++count;
         boolean var7 = false;
         if (count < 0) {
            CollectionsKt.throwCountOverflow();
         }
      }

      return count == 0 ? DoubleCompanionObject.INSTANCE.getNaN() : sum / (double)count;
   }

   @JvmName(
      name = "averageOfLong"
   )
   public static final double averageOfLong(@NotNull Sequence<Long> $this$average) {
      Intrinsics.checkParameterIsNotNull($this$average, "$this$average");
      double sum = 0.0D;
      int count = 0;
      Iterator var6 = $this$average.iterator();

      while(var6.hasNext()) {
         long element = ((Number)var6.next()).longValue();
         sum += (double)element;
         ++count;
         boolean var8 = false;
         if (count < 0) {
            CollectionsKt.throwCountOverflow();
         }
      }

      return count == 0 ? DoubleCompanionObject.INSTANCE.getNaN() : sum / (double)count;
   }

   @JvmName(
      name = "averageOfFloat"
   )
   public static final double averageOfFloat(@NotNull Sequence<Float> $this$average) {
      Intrinsics.checkParameterIsNotNull($this$average, "$this$average");
      double sum = 0.0D;
      int count = 0;
      Iterator var5 = $this$average.iterator();

      while(var5.hasNext()) {
         float element = ((Number)var5.next()).floatValue();
         sum += (double)element;
         ++count;
         boolean var7 = false;
         if (count < 0) {
            CollectionsKt.throwCountOverflow();
         }
      }

      return count == 0 ? DoubleCompanionObject.INSTANCE.getNaN() : sum / (double)count;
   }

   @JvmName(
      name = "averageOfDouble"
   )
   public static final double averageOfDouble(@NotNull Sequence<Double> $this$average) {
      Intrinsics.checkParameterIsNotNull($this$average, "$this$average");
      double sum = 0.0D;
      int count = 0;
      Iterator var6 = $this$average.iterator();

      while(var6.hasNext()) {
         double element = ((Number)var6.next()).doubleValue();
         sum += element;
         ++count;
         boolean var8 = false;
         if (count < 0) {
            CollectionsKt.throwCountOverflow();
         }
      }

      return count == 0 ? DoubleCompanionObject.INSTANCE.getNaN() : sum / (double)count;
   }

   @JvmName(
      name = "sumOfByte"
   )
   public static final int sumOfByte(@NotNull Sequence<Byte> $this$sum) {
      Intrinsics.checkParameterIsNotNull($this$sum, "$this$sum");
      int sum = 0;

      byte element;
      for(Iterator var3 = $this$sum.iterator(); var3.hasNext(); sum += element) {
         element = ((Number)var3.next()).byteValue();
      }

      return sum;
   }

   @JvmName(
      name = "sumOfShort"
   )
   public static final int sumOfShort(@NotNull Sequence<Short> $this$sum) {
      Intrinsics.checkParameterIsNotNull($this$sum, "$this$sum");
      int sum = 0;

      short element;
      for(Iterator var3 = $this$sum.iterator(); var3.hasNext(); sum += element) {
         element = ((Number)var3.next()).shortValue();
      }

      return sum;
   }

   @JvmName(
      name = "sumOfInt"
   )
   public static final int sumOfInt(@NotNull Sequence<Integer> $this$sum) {
      Intrinsics.checkParameterIsNotNull($this$sum, "$this$sum");
      int sum = 0;

      int element;
      for(Iterator var3 = $this$sum.iterator(); var3.hasNext(); sum += element) {
         element = ((Number)var3.next()).intValue();
      }

      return sum;
   }

   @JvmName(
      name = "sumOfLong"
   )
   public static final long sumOfLong(@NotNull Sequence<Long> $this$sum) {
      Intrinsics.checkParameterIsNotNull($this$sum, "$this$sum");
      long sum = 0L;

      long element;
      for(Iterator var5 = $this$sum.iterator(); var5.hasNext(); sum += element) {
         element = ((Number)var5.next()).longValue();
      }

      return sum;
   }

   @JvmName(
      name = "sumOfFloat"
   )
   public static final float sumOfFloat(@NotNull Sequence<Float> $this$sum) {
      Intrinsics.checkParameterIsNotNull($this$sum, "$this$sum");
      float sum = 0.0F;

      float element;
      for(Iterator var3 = $this$sum.iterator(); var3.hasNext(); sum += element) {
         element = ((Number)var3.next()).floatValue();
      }

      return sum;
   }

   @JvmName(
      name = "sumOfDouble"
   )
   public static final double sumOfDouble(@NotNull Sequence<Double> $this$sum) {
      Intrinsics.checkParameterIsNotNull($this$sum, "$this$sum");
      double sum = 0.0D;

      double element;
      for(Iterator var5 = $this$sum.iterator(); var5.hasNext(); sum += element) {
         element = ((Number)var5.next()).doubleValue();
      }

      return sum;
   }

   public SequencesKt___SequencesKt() {
   }
}
